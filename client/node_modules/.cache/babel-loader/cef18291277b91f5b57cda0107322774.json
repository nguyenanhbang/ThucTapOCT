{"ast":null,"code":"var util = require(\"./core/util\");\n\nvar vec2 = require(\"./core/vector\");\n\nvar Draggable = require(\"./mixin/Draggable\");\n\nvar Eventful = require(\"./mixin/Eventful\");\n\nvar eventTool = require(\"./core/event\");\n\nvar GestureMgr = require(\"./core/GestureMgr\");\n/**\r\n * [The interface between `Handler` and `HandlerProxy`]:\r\n *\r\n * The default `HandlerProxy` only support the common standard web environment\r\n * (e.g., standalone browser, headless browser, embed browser in mobild APP, ...).\r\n * But `HandlerProxy` can be replaced to support more non-standard environment\r\n * (e.g., mini app), or to support more feature that the default `HandlerProxy`\r\n * not provided (like echarts-gl did).\r\n * So the interface between `Handler` and `HandlerProxy` should be stable. Do not\r\n * make break changes util inevitable. The interface include the public methods\r\n * of `Handler` and the events listed in `handlerNames` below, by which `HandlerProxy`\r\n * drives `Handler`.\r\n */\n\n/**\r\n * [Drag outside]:\r\n *\r\n * That is, triggering `mousemove` and `mouseup` event when the pointer is out of the\r\n * zrender area when dragging. That is important for the improvement of the user experience\r\n * when dragging something near the boundary without being terminated unexpectedly.\r\n *\r\n * We originally consider to introduce new events like `pagemovemove` and `pagemouseup`\r\n * to resolve this issue. But some drawbacks of it is described in\r\n * https://github.com/ecomfe/zrender/pull/536#issuecomment-560286899\r\n *\r\n * Instead, we referenced the specifications:\r\n * https://www.w3.org/TR/touch-events/#the-touchmove-event\r\n * https://www.w3.org/TR/2014/WD-DOM-Level-3-Events-20140925/#event-type-mousemove\r\n * where the the mousemove/touchmove can be continue to fire if the user began a drag\r\n * operation and the pointer has left the boundary. (for the mouse event, browsers\r\n * only do it on `document` and when the pointer has left the boundary of the browser.)\r\n *\r\n * So the default `HandlerProxy` supports this feature similarly: if it is in the dragging\r\n * state (see `pointerCapture` in `HandlerProxy`), the `mousemove` and `mouseup` continue\r\n * to fire until release the pointer. That is implemented by listen to those event on\r\n * `document`.\r\n * If we implement some other `HandlerProxy` only for touch device, that would be easier.\r\n * The touch event support this feature by default.\r\n *\r\n * Note:\r\n * There might be some cases that the mouse event can not be\r\n * received on `document`. For example,\r\n * (A) `useCapture` is not supported and some user defined event listeners on the ancestor\r\n * of zr dom throw Error .\r\n * (B) `useCapture` is not supported Some user defined event listeners on the ancestor of\r\n * zr dom call `stopPropagation`.\r\n * In these cases, the `mousemove` event might be keep triggered event\r\n * if the mouse is released. We try to reduce the side-effect in those cases.\r\n * That is, do nothing (especially, `findHover`) in those cases. See `isOutsideBoundary`.\r\n *\r\n * Note:\r\n * If `HandlerProxy` listens to `document` with `useCapture`, `HandlerProxy` needs to\r\n * make sure `stopPropagation` and `preventDefault` doing nothing if and only if the event\r\n * target is not zrender dom. Becuase it is dangerous to enable users to call them in\r\n * `document` capture phase to prevent the propagation to any listener of the webpage.\r\n * But they are needed to work when the pointer inside the zrender dom.\r\n */\n\n\nvar SILENT = 'silent';\n\nfunction makeEventPacket(eveType, targetInfo, event) {\n  return {\n    type: eveType,\n    event: event,\n    // target can only be an element that is not silent.\n    target: targetInfo.target,\n    // topTarget can be a silent element.\n    topTarget: targetInfo.topTarget,\n    cancelBubble: false,\n    offsetX: event.zrX,\n    offsetY: event.zrY,\n    gestureEvent: event.gestureEvent,\n    pinchX: event.pinchX,\n    pinchY: event.pinchY,\n    pinchScale: event.pinchScale,\n    wheelDelta: event.zrDelta,\n    zrByTouch: event.zrByTouch,\n    which: event.which,\n    stop: stopEvent\n  };\n}\n\nfunction stopEvent() {\n  eventTool.stop(this.event);\n}\n\nfunction EmptyProxy() {}\n\nEmptyProxy.prototype.dispose = function () {};\n\nvar handlerNames = ['click', 'dblclick', 'mousewheel', 'mouseout', 'mouseup', 'mousedown', 'mousemove', 'contextmenu'];\n/**\r\n * @alias module:zrender/Handler\r\n * @constructor\r\n * @extends module:zrender/mixin/Eventful\r\n * @param {module:zrender/Storage} storage Storage instance.\r\n * @param {module:zrender/Painter} painter Painter instance.\r\n * @param {module:zrender/dom/HandlerProxy} proxy HandlerProxy instance.\r\n * @param {HTMLElement} painterRoot painter.root (not painter.getViewportRoot()).\r\n */\n\nvar Handler = function Handler(storage, painter, proxy, painterRoot) {\n  Eventful.call(this);\n  this.storage = storage;\n  this.painter = painter;\n  this.painterRoot = painterRoot;\n  proxy = proxy || new EmptyProxy();\n  /**\r\n   * Proxy of event. can be Dom, WebGLSurface, etc.\r\n   */\n\n  this.proxy = null;\n  /**\r\n   * {target, topTarget, x, y}\r\n   * @private\r\n   * @type {Object}\r\n   */\n\n  this._hovered = {};\n  /**\r\n   * @private\r\n   * @type {Date}\r\n   */\n\n  this._lastTouchMoment;\n  /**\r\n   * @private\r\n   * @type {number}\r\n   */\n\n  this._lastX;\n  /**\r\n   * @private\r\n   * @type {number}\r\n   */\n\n  this._lastY;\n  /**\r\n   * @private\r\n   * @type {module:zrender/core/GestureMgr}\r\n   */\n\n  this._gestureMgr;\n  Draggable.call(this);\n  this.setHandlerProxy(proxy);\n};\n\nHandler.prototype = {\n  constructor: Handler,\n  setHandlerProxy: function setHandlerProxy(proxy) {\n    if (this.proxy) {\n      this.proxy.dispose();\n    }\n\n    if (proxy) {\n      util.each(handlerNames, function (name) {\n        proxy.on && proxy.on(name, this[name], this);\n      }, this); // Attach handler\n\n      proxy.handler = this;\n    }\n\n    this.proxy = proxy;\n  },\n  mousemove: function mousemove(event) {\n    var x = event.zrX;\n    var y = event.zrY;\n    var isOutside = isOutsideBoundary(this, x, y);\n    var lastHovered = this._hovered;\n    var lastHoveredTarget = lastHovered.target; // If lastHoveredTarget is removed from zr (detected by '__zr') by some API call\n    // (like 'setOption' or 'dispatchAction') in event handlers, we should find\n    // lastHovered again here. Otherwise 'mouseout' can not be triggered normally.\n    // See #6198.\n\n    if (lastHoveredTarget && !lastHoveredTarget.__zr) {\n      lastHovered = this.findHover(lastHovered.x, lastHovered.y);\n      lastHoveredTarget = lastHovered.target;\n    }\n\n    var hovered = this._hovered = isOutside ? {\n      x: x,\n      y: y\n    } : this.findHover(x, y);\n    var hoveredTarget = hovered.target;\n    var proxy = this.proxy;\n    proxy.setCursor && proxy.setCursor(hoveredTarget ? hoveredTarget.cursor : 'default'); // Mouse out on previous hovered element\n\n    if (lastHoveredTarget && hoveredTarget !== lastHoveredTarget) {\n      this.dispatchToElement(lastHovered, 'mouseout', event);\n    } // Mouse moving on one element\n\n\n    this.dispatchToElement(hovered, 'mousemove', event); // Mouse over on a new element\n\n    if (hoveredTarget && hoveredTarget !== lastHoveredTarget) {\n      this.dispatchToElement(hovered, 'mouseover', event);\n    }\n  },\n  mouseout: function mouseout(event) {\n    var eventControl = event.zrEventControl;\n    var zrIsToLocalDOM = event.zrIsToLocalDOM;\n\n    if (eventControl !== 'only_globalout') {\n      this.dispatchToElement(this._hovered, 'mouseout', event);\n    }\n\n    if (eventControl !== 'no_globalout') {\n      // FIXME: if the pointer moving from the extra doms to realy \"outside\",\n      // the `globalout` should have been triggered. But currently not.\n      !zrIsToLocalDOM && this.trigger('globalout', {\n        type: 'globalout',\n        event: event\n      });\n    }\n  },\n\n  /**\r\n   * Resize\r\n   */\n  resize: function resize(event) {\n    this._hovered = {};\n  },\n\n  /**\r\n   * Dispatch event\r\n   * @param {string} eventName\r\n   * @param {event=} eventArgs\r\n   */\n  dispatch: function dispatch(eventName, eventArgs) {\n    var handler = this[eventName];\n    handler && handler.call(this, eventArgs);\n  },\n\n  /**\r\n   * Dispose\r\n   */\n  dispose: function dispose() {\n    this.proxy.dispose();\n    this.storage = this.proxy = this.painter = null;\n  },\n\n  /**\r\n   * 设置默认的cursor style\r\n   * @param {string} [cursorStyle='default'] 例如 crosshair\r\n   */\n  setCursorStyle: function setCursorStyle(cursorStyle) {\n    var proxy = this.proxy;\n    proxy.setCursor && proxy.setCursor(cursorStyle);\n  },\n\n  /**\r\n   * 事件分发代理\r\n   *\r\n   * @private\r\n   * @param {Object} targetInfo {target, topTarget} 目标图形元素\r\n   * @param {string} eventName 事件名称\r\n   * @param {Object} event 事件对象\r\n   */\n  dispatchToElement: function dispatchToElement(targetInfo, eventName, event) {\n    targetInfo = targetInfo || {};\n    var el = targetInfo.target;\n\n    if (el && el.silent) {\n      return;\n    }\n\n    var eventHandler = 'on' + eventName;\n    var eventPacket = makeEventPacket(eventName, targetInfo, event);\n\n    while (el) {\n      el[eventHandler] && (eventPacket.cancelBubble = el[eventHandler].call(el, eventPacket));\n      el.trigger(eventName, eventPacket);\n      el = el.parent;\n\n      if (eventPacket.cancelBubble) {\n        break;\n      }\n    }\n\n    if (!eventPacket.cancelBubble) {\n      // 冒泡到顶级 zrender 对象\n      this.trigger(eventName, eventPacket); // 分发事件到用户自定义层\n      // 用户有可能在全局 click 事件中 dispose，所以需要判断下 painter 是否存在\n\n      this.painter && this.painter.eachOtherLayer(function (layer) {\n        if (typeof layer[eventHandler] === 'function') {\n          layer[eventHandler].call(layer, eventPacket);\n        }\n\n        if (layer.trigger) {\n          layer.trigger(eventName, eventPacket);\n        }\n      });\n    }\n  },\n\n  /**\r\n   * @private\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {module:zrender/graphic/Displayable} exclude\r\n   * @return {model:zrender/Element}\r\n   * @method\r\n   */\n  findHover: function findHover(x, y, exclude) {\n    var list = this.storage.getDisplayList();\n    var out = {\n      x: x,\n      y: y\n    };\n\n    for (var i = list.length - 1; i >= 0; i--) {\n      var hoverCheckResult;\n\n      if (list[i] !== exclude // getDisplayList may include ignored item in VML mode\n      && !list[i].ignore && (hoverCheckResult = isHover(list[i], x, y))) {\n        !out.topTarget && (out.topTarget = list[i]);\n\n        if (hoverCheckResult !== SILENT) {\n          out.target = list[i];\n          break;\n        }\n      }\n    }\n\n    return out;\n  },\n  processGesture: function processGesture(event, stage) {\n    if (!this._gestureMgr) {\n      this._gestureMgr = new GestureMgr();\n    }\n\n    var gestureMgr = this._gestureMgr;\n    stage === 'start' && gestureMgr.clear();\n    var gestureInfo = gestureMgr.recognize(event, this.findHover(event.zrX, event.zrY, null).target, this.proxy.dom);\n    stage === 'end' && gestureMgr.clear(); // Do not do any preventDefault here. Upper application do that if necessary.\n\n    if (gestureInfo) {\n      var type = gestureInfo.type;\n      event.gestureEvent = type;\n      this.dispatchToElement({\n        target: gestureInfo.target\n      }, type, gestureInfo.event);\n    }\n  }\n}; // Common handlers\n\nutil.each(['click', 'mousedown', 'mouseup', 'mousewheel', 'dblclick', 'contextmenu'], function (name) {\n  Handler.prototype[name] = function (event) {\n    var x = event.zrX;\n    var y = event.zrY;\n    var isOutside = isOutsideBoundary(this, x, y);\n    var hovered;\n    var hoveredTarget;\n\n    if (name !== 'mouseup' || !isOutside) {\n      // Find hover again to avoid click event is dispatched manually. Or click is triggered without mouseover\n      hovered = this.findHover(x, y);\n      hoveredTarget = hovered.target;\n    }\n\n    if (name === 'mousedown') {\n      this._downEl = hoveredTarget;\n      this._downPoint = [event.zrX, event.zrY]; // In case click triggered before mouseup\n\n      this._upEl = hoveredTarget;\n    } else if (name === 'mouseup') {\n      this._upEl = hoveredTarget;\n    } else if (name === 'click') {\n      if (this._downEl !== this._upEl // Original click event is triggered on the whole canvas element,\n      // including the case that `mousedown` - `mousemove` - `mouseup`,\n      // which should be filtered, otherwise it will bring trouble to\n      // pan and zoom.\n      || !this._downPoint // Arbitrary value\n      || vec2.dist(this._downPoint, [event.zrX, event.zrY]) > 4) {\n        return;\n      }\n\n      this._downPoint = null;\n    }\n\n    this.dispatchToElement(hovered, name, event);\n  };\n});\n\nfunction isHover(displayable, x, y) {\n  if (displayable[displayable.rectHover ? 'rectContain' : 'contain'](x, y)) {\n    var el = displayable;\n    var isSilent;\n\n    while (el) {\n      // If clipped by ancestor.\n      // FIXME: If clipPath has neither stroke nor fill,\n      // el.clipPath.contain(x, y) will always return false.\n      if (el.clipPath && !el.clipPath.contain(x, y)) {\n        return false;\n      }\n\n      if (el.silent) {\n        isSilent = true;\n      }\n\n      el = el.parent;\n    }\n\n    return isSilent ? SILENT : true;\n  }\n\n  return false;\n}\n/**\r\n * See [Drag outside].\r\n */\n\n\nfunction isOutsideBoundary(handlerInstance, x, y) {\n  var painter = handlerInstance.painter;\n  return x < 0 || x > painter.getWidth() || y < 0 || y > painter.getHeight();\n}\n\nutil.mixin(Handler, Eventful);\nutil.mixin(Handler, Draggable);\nvar _default = Handler;\nmodule.exports = _default;","map":null,"metadata":{},"sourceType":"script"}