{"ast":null,"code":"import toDate from \"../toDate/index.js\";\nimport startOfISOWeek from \"../startOfISOWeek/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\r\n * @name getISOWeekYear\r\n * @category ISO Week-Numbering Year Helpers\r\n * @summary Get the ISO week-numbering year of the given date.\r\n *\r\n * @description\r\n * Get the ISO week-numbering year of the given date,\r\n * which always starts 3 days before the year's first Thursday.\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * - The function was renamed from `getISOYear` to `getISOWeekYear`.\r\n *   \"ISO week year\" is short for [ISO week-numbering year](https://en.wikipedia.org/wiki/ISO_week_date).\r\n *   This change makes the name consistent with\r\n *   locale-dependent week-numbering year helpers, e.g., `getWeekYear`.\r\n *\r\n * @param {Date|Number} date - the given date\r\n * @returns {Number} the ISO week-numbering year\r\n * @throws {TypeError} 1 argument required\r\n *\r\n * @example\r\n * // Which ISO-week numbering year is 2 January 2005?\r\n * const result = getISOWeekYear(new Date(2005, 0, 2))\r\n * //=> 2004\r\n */\n\nexport default function getISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var fourthOfJanuaryOfNextYear = new Date(0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n  var startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);\n  var fourthOfJanuaryOfThisYear = new Date(0);\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);\n  var startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}