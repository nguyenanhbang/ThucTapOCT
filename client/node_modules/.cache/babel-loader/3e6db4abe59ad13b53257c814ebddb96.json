{"ast":null,"code":"import toDate from \"../toDate/index.js\";\nimport isValid from \"../isValid/index.js\";\nimport addLeadingZeros from \"../_lib/addLeadingZeros/index.js\";\n/**\r\n * @name formatISO9075\r\n * @category Common Helpers\r\n * @summary Format the date according to the ISO 9075 standard (https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html#function_get-format).\r\n *\r\n * @description\r\n * Return the formatted date string in ISO 9075 format. Options may be passed to control the parts and notations of the date.\r\n *\r\n * @param {Date|Number} date - the original date\r\n * @param {Object} [options] - an object with options.\r\n * @param {'extended'|'basic'} [options.format='extended'] - if 'basic', hide delimiters between date and time values.\r\n * @param {'complete'|'date'|'time'} [options.representation='complete'] - format date, time, or both.\r\n * @returns {String} the formatted date string\r\n * @throws {TypeError} 1 argument required\r\n * @throws {RangeError} `date` must not be Invalid Date\r\n * @throws {RangeError} `options.format` must be 'extended' or 'basic'\r\n * @throws {RangeError} `options.represenation` must be 'date', 'time' or 'complete'\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in ISO 9075 format:\r\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52))\r\n * //=> '2019-09-18 19:00:52'\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in ISO 9075, short format:\r\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\r\n * //=> '20190918 190052'\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in ISO 9075 format, date only:\r\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\r\n * //=> '2019-09-18'\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in ISO 9075 format, time only:\r\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\r\n * //=> '19:00:52'\r\n */\n\nexport default function formatISO9075(dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 argument required, but only \".concat(arguments.length, \" present\"));\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var options = dirtyOptions || {};\n  var format = options.format == null ? 'extended' : String(options.format);\n  var representation = options.representation == null ? 'complete' : String(options.representation);\n\n  if (format !== 'extended' && format !== 'basic') {\n    throw new RangeError(\"format must be 'extended' or 'basic'\");\n  }\n\n  if (representation !== 'date' && representation !== 'time' && representation !== 'complete') {\n    throw new RangeError(\"representation must be 'date', 'time', or 'complete'\");\n  }\n\n  var result = '';\n  var dateDelimiter = format === 'extended' ? '-' : '';\n  var timeDelimiter = format === 'extended' ? ':' : ''; // Representation is either 'date' or 'complete'\n\n  if (representation !== 'time') {\n    var day = addLeadingZeros(originalDate.getDate(), 2);\n    var month = addLeadingZeros(originalDate.getMonth() + 1, 2);\n    var year = addLeadingZeros(originalDate.getFullYear(), 4); // yyyyMMdd or yyyy-MM-dd.\n\n    result = \"\".concat(year).concat(dateDelimiter).concat(month).concat(dateDelimiter).concat(day);\n  } // Representation is either 'time' or 'complete'\n\n\n  if (representation !== 'date') {\n    var hour = addLeadingZeros(originalDate.getHours(), 2);\n    var minute = addLeadingZeros(originalDate.getMinutes(), 2);\n    var second = addLeadingZeros(originalDate.getSeconds(), 2); // If there's also date, separate it with time with a space\n\n    var separator = result === '' ? '' : ' '; // HHmmss or HH:mm:ss.\n\n    result = \"\".concat(result).concat(separator).concat(hour).concat(timeDelimiter).concat(minute).concat(timeDelimiter).concat(second);\n  }\n\n  return result;\n}","map":null,"metadata":{},"sourceType":"module"}