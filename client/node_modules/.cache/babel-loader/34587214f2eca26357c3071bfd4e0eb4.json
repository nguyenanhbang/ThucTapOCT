{"ast":null,"code":"import addHours from \"../addHours/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\r\n * @name eachHourOfInterval\r\n * @category Interval Helpers\r\n * @summary Return the array of hours within the specified time interval.\r\n *\r\n * @description\r\n * Return the array of hours within the specified time interval.\r\n *\r\n * @param {Interval} interval - the interval. See [Interval]{@link docs/types/Interval}\r\n * @param {Object} [options] - an object with options.\r\n * @param {Number} [options.step=1] - the step to increment by. The value should be more than 1.\r\n * @returns {Date[]} the array with starts of hours from the hour of the interval start to the hour of the interval end\r\n * @throws {TypeError} 1 argument required\r\n * @throws {RangeError} `options.step` must be a number greater than 1\r\n * @throws {RangeError} The start of an interval cannot be after its end\r\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\r\n *\r\n * @example\r\n * // Each hour between 6 October 2014, 12:00 and 10 October 2014, 15:00\r\n * var result = eachHourOfInterval({\r\n *   start: new Date(2014, 9, 6, 12),\r\n *   end: new Date(2014, 9, 6, 15)\r\n * })\r\n * //=> [\r\n * //   Mon Oct 06 2014 12:00:00,\r\n * //   Mon Oct 06 2014 13:00:00,\r\n * //   Mon Oct 06 2014 14:00:00,\r\n * //   Mon Oct 06 2014 15:00:00\r\n * // ]\r\n */\n\nexport default function eachHourOfInterval(dirtyInterval, options) {\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var startTime = startDate.getTime();\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startTime <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var dates = [];\n  var currentDate = startDate;\n  currentDate.setMinutes(0, 0, 0);\n  var step = options && 'step' in options ? Number(options.step) : 1;\n  if (step < 1 || isNaN(step)) throw new RangeError('`options.step` must be a number greater than 1');\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate = addHours(currentDate, step);\n  }\n\n  return dates;\n}","map":null,"metadata":{},"sourceType":"module"}