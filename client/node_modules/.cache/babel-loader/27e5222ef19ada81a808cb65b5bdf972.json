{"ast":null,"code":"var guid = require(\"./core/guid\");\n\nvar Eventful = require(\"./mixin/Eventful\");\n\nvar Transformable = require(\"./mixin/Transformable\");\n\nvar Animatable = require(\"./mixin/Animatable\");\n\nvar zrUtil = require(\"./core/util\");\n/**\r\n * @alias module:zrender/Element\r\n * @constructor\r\n * @extends {module:zrender/mixin/Animatable}\r\n * @extends {module:zrender/mixin/Transformable}\r\n * @extends {module:zrender/mixin/Eventful}\r\n */\n\n\nvar Element = function Element(opts) {\n  // jshint ignore:line\n  Transformable.call(this, opts);\n  Eventful.call(this, opts);\n  Animatable.call(this, opts);\n  /**\r\n   * 画布元素ID\r\n   * @type {string}\r\n   */\n\n  this.id = opts.id || guid();\n};\n\nElement.prototype = {\n  /**\r\n   * 元素类型\r\n   * Element type\r\n   * @type {string}\r\n   */\n  type: 'element',\n\n  /**\r\n   * 元素名字\r\n   * Element name\r\n   * @type {string}\r\n   */\n  name: '',\n\n  /**\r\n   * ZRender 实例对象，会在 element 添加到 zrender 实例中后自动赋值\r\n   * ZRender instance will be assigned when element is associated with zrender\r\n   * @name module:/zrender/Element#__zr\r\n   * @type {module:zrender/ZRender}\r\n   */\n  __zr: null,\n\n  /**\r\n   * 图形是否忽略，为true时忽略图形的绘制以及事件触发\r\n   * If ignore drawing and events of the element object\r\n   * @name module:/zrender/Element#ignore\r\n   * @type {boolean}\r\n   * @default false\r\n   */\n  ignore: false,\n\n  /**\r\n   * 用于裁剪的路径(shape)，所有 Group 内的路径在绘制时都会被这个路径裁剪\r\n   * 该路径会继承被裁减对象的变换\r\n   * @type {module:zrender/graphic/Path}\r\n   * @see http://www.w3.org/TR/2dcontext/#clipping-region\r\n   * @readOnly\r\n   */\n  clipPath: null,\n\n  /**\r\n   * 是否是 Group\r\n   * @type {boolean}\r\n   */\n  isGroup: false,\n\n  /**\r\n   * Drift element\r\n   * @param  {number} dx dx on the global space\r\n   * @param  {number} dy dy on the global space\r\n   */\n  drift: function drift(dx, dy) {\n    switch (this.draggable) {\n      case 'horizontal':\n        dy = 0;\n        break;\n\n      case 'vertical':\n        dx = 0;\n        break;\n    }\n\n    var m = this.transform;\n\n    if (!m) {\n      m = this.transform = [1, 0, 0, 1, 0, 0];\n    }\n\n    m[4] += dx;\n    m[5] += dy;\n    this.decomposeTransform();\n    this.dirty(false);\n  },\n\n  /**\r\n   * Hook before update\r\n   */\n  beforeUpdate: function beforeUpdate() {},\n\n  /**\r\n   * Hook after update\r\n   */\n  afterUpdate: function afterUpdate() {},\n\n  /**\r\n   * Update each frame\r\n   */\n  update: function update() {\n    this.updateTransform();\n  },\n\n  /**\r\n   * @param  {Function} cb\r\n   * @param  {}   context\r\n   */\n  traverse: function traverse(cb, context) {},\n\n  /**\r\n   * @protected\r\n   */\n  attrKV: function attrKV(key, value) {\n    if (key === 'position' || key === 'scale' || key === 'origin') {\n      // Copy the array\n      if (value) {\n        var target = this[key];\n\n        if (!target) {\n          target = this[key] = [];\n        }\n\n        target[0] = value[0];\n        target[1] = value[1];\n      }\n    } else {\n      this[key] = value;\n    }\n  },\n\n  /**\r\n   * Hide the element\r\n   */\n  hide: function hide() {\n    this.ignore = true;\n    this.__zr && this.__zr.refresh();\n  },\n\n  /**\r\n   * Show the element\r\n   */\n  show: function show() {\n    this.ignore = false;\n    this.__zr && this.__zr.refresh();\n  },\n\n  /**\r\n   * @param {string|Object} key\r\n   * @param {*} value\r\n   */\n  attr: function attr(key, value) {\n    if (typeof key === 'string') {\n      this.attrKV(key, value);\n    } else if (zrUtil.isObject(key)) {\n      for (var name in key) {\n        if (key.hasOwnProperty(name)) {\n          this.attrKV(name, key[name]);\n        }\n      }\n    }\n\n    this.dirty(false);\n    return this;\n  },\n\n  /**\r\n   * @param {module:zrender/graphic/Path} clipPath\r\n   */\n  setClipPath: function setClipPath(clipPath) {\n    var zr = this.__zr;\n\n    if (zr) {\n      clipPath.addSelfToZr(zr);\n    } // Remove previous clip path\n\n\n    if (this.clipPath && this.clipPath !== clipPath) {\n      this.removeClipPath();\n    }\n\n    this.clipPath = clipPath;\n    clipPath.__zr = zr;\n    clipPath.__clipTarget = this;\n    this.dirty(false);\n  },\n\n  /**\r\n   */\n  removeClipPath: function removeClipPath() {\n    var clipPath = this.clipPath;\n\n    if (clipPath) {\n      if (clipPath.__zr) {\n        clipPath.removeSelfFromZr(clipPath.__zr);\n      }\n\n      clipPath.__zr = null;\n      clipPath.__clipTarget = null;\n      this.clipPath = null;\n      this.dirty(false);\n    }\n  },\n\n  /**\r\n   * Add self from zrender instance.\r\n   * Not recursively because it will be invoked when element added to storage.\r\n   * @param {module:zrender/ZRender} zr\r\n   */\n  addSelfToZr: function addSelfToZr(zr) {\n    this.__zr = zr; // 添加动画\n\n    var animators = this.animators;\n\n    if (animators) {\n      for (var i = 0; i < animators.length; i++) {\n        zr.animation.addAnimator(animators[i]);\n      }\n    }\n\n    if (this.clipPath) {\n      this.clipPath.addSelfToZr(zr);\n    }\n  },\n\n  /**\r\n   * Remove self from zrender instance.\r\n   * Not recursively because it will be invoked when element added to storage.\r\n   * @param {module:zrender/ZRender} zr\r\n   */\n  removeSelfFromZr: function removeSelfFromZr(zr) {\n    this.__zr = null; // 移除动画\n\n    var animators = this.animators;\n\n    if (animators) {\n      for (var i = 0; i < animators.length; i++) {\n        zr.animation.removeAnimator(animators[i]);\n      }\n    }\n\n    if (this.clipPath) {\n      this.clipPath.removeSelfFromZr(zr);\n    }\n  }\n};\nzrUtil.mixin(Element, Animatable);\nzrUtil.mixin(Element, Transformable);\nzrUtil.mixin(Element, Eventful);\nvar _default = Element;\nmodule.exports = _default;","map":null,"metadata":{},"sourceType":"script"}