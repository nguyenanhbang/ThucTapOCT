{"ast":null,"code":"/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nvar _util = require(\"zrender/lib/core/util\");\n\nvar each = _util.each;\n\nvar Group = require(\"zrender/lib/container/Group\");\n\nvar componentUtil = require(\"../util/component\");\n\nvar clazzUtil = require(\"../util/clazz\");\n\nvar modelUtil = require(\"../util/model\");\n\nvar graphicUtil = require(\"../util/graphic\");\n\nvar _task = require(\"../stream/task\");\n\nvar createTask = _task.createTask;\n\nvar createRenderPlanner = require(\"../chart/helper/createRenderPlanner\");\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n\n\nvar inner = modelUtil.makeInner();\nvar renderPlanner = createRenderPlanner();\n\nfunction Chart() {\n  /**\r\n   * @type {module:zrender/container/Group}\r\n   * @readOnly\r\n   */\n  this.group = new Group();\n  /**\r\n   * @type {string}\r\n   * @readOnly\r\n   */\n\n  this.uid = componentUtil.getUID('viewChart');\n  this.renderTask = createTask({\n    plan: renderTaskPlan,\n    reset: renderTaskReset\n  });\n  this.renderTask.context = {\n    view: this\n  };\n}\n\nChart.prototype = {\n  type: 'chart',\n\n  /**\r\n   * Init the chart.\r\n   * @param  {module:echarts/model/Global} ecModel\r\n   * @param  {module:echarts/ExtensionAPI} api\r\n   */\n  init: function init(ecModel, api) {},\n\n  /**\r\n   * Render the chart.\r\n   * @param  {module:echarts/model/Series} seriesModel\r\n   * @param  {module:echarts/model/Global} ecModel\r\n   * @param  {module:echarts/ExtensionAPI} api\r\n   * @param  {Object} payload\r\n   */\n  render: function render(seriesModel, ecModel, api, payload) {},\n\n  /**\r\n   * Highlight series or specified data item.\r\n   * @param  {module:echarts/model/Series} seriesModel\r\n   * @param  {module:echarts/model/Global} ecModel\r\n   * @param  {module:echarts/ExtensionAPI} api\r\n   * @param  {Object} payload\r\n   */\n  highlight: function highlight(seriesModel, ecModel, api, payload) {\n    toggleHighlight(seriesModel.getData(), payload, 'emphasis');\n  },\n\n  /**\r\n   * Downplay series or specified data item.\r\n   * @param  {module:echarts/model/Series} seriesModel\r\n   * @param  {module:echarts/model/Global} ecModel\r\n   * @param  {module:echarts/ExtensionAPI} api\r\n   * @param  {Object} payload\r\n   */\n  downplay: function downplay(seriesModel, ecModel, api, payload) {\n    toggleHighlight(seriesModel.getData(), payload, 'normal');\n  },\n\n  /**\r\n   * Remove self.\r\n   * @param  {module:echarts/model/Global} ecModel\r\n   * @param  {module:echarts/ExtensionAPI} api\r\n   */\n  remove: function remove(ecModel, api) {\n    this.group.removeAll();\n  },\n\n  /**\r\n   * Dispose self.\r\n   * @param  {module:echarts/model/Global} ecModel\r\n   * @param  {module:echarts/ExtensionAPI} api\r\n   */\n  dispose: function dispose() {},\n\n  /**\r\n   * Rendering preparation in progressive mode.\r\n   * @param  {module:echarts/model/Series} seriesModel\r\n   * @param  {module:echarts/model/Global} ecModel\r\n   * @param  {module:echarts/ExtensionAPI} api\r\n   * @param  {Object} payload\r\n   */\n  incrementalPrepareRender: null,\n\n  /**\r\n   * Render in progressive mode.\r\n   * @param  {Object} params See taskParams in `stream/task.js`\r\n   * @param  {module:echarts/model/Series} seriesModel\r\n   * @param  {module:echarts/model/Global} ecModel\r\n   * @param  {module:echarts/ExtensionAPI} api\r\n   * @param  {Object} payload\r\n   */\n  incrementalRender: null,\n\n  /**\r\n   * Update transform directly.\r\n   * @param  {module:echarts/model/Series} seriesModel\r\n   * @param  {module:echarts/model/Global} ecModel\r\n   * @param  {module:echarts/ExtensionAPI} api\r\n   * @param  {Object} payload\r\n   * @return {Object} {update: true}\r\n   */\n  updateTransform: null,\n\n  /**\r\n   * The view contains the given point.\r\n   * @interface\r\n   * @param {Array.<number>} point\r\n   * @return {boolean}\r\n   */\n  // containPoint: function () {}\n\n  /**\r\n   * @param {string} eventType\r\n   * @param {Object} query\r\n   * @param {module:zrender/Element} targetEl\r\n   * @param {Object} packedEvent\r\n   * @return {boolen} Pass only when return `true`.\r\n   */\n  filterForExposedEvent: null\n};\nvar chartProto = Chart.prototype;\n\nchartProto.updateView = chartProto.updateLayout = chartProto.updateVisual = function (seriesModel, ecModel, api, payload) {\n  this.render(seriesModel, ecModel, api, payload);\n};\n/**\r\n * Set state of single element\r\n * @param {module:zrender/Element} el\r\n * @param {string} state 'normal'|'emphasis'\r\n * @param {number} highlightDigit\r\n */\n\n\nfunction elSetState(el, state, highlightDigit) {\n  if (el) {\n    el.trigger(state, highlightDigit);\n\n    if (el.isGroup // Simple optimize.\n    && !graphicUtil.isHighDownDispatcher(el)) {\n      for (var i = 0, len = el.childCount(); i < len; i++) {\n        elSetState(el.childAt(i), state, highlightDigit);\n      }\n    }\n  }\n}\n/**\r\n * @param {module:echarts/data/List} data\r\n * @param {Object} payload\r\n * @param {string} state 'normal'|'emphasis'\r\n */\n\n\nfunction toggleHighlight(data, payload, state) {\n  var dataIndex = modelUtil.queryDataIndex(data, payload);\n  var highlightDigit = payload && payload.highlightKey != null ? graphicUtil.getHighlightDigit(payload.highlightKey) : null;\n\n  if (dataIndex != null) {\n    each(modelUtil.normalizeToArray(dataIndex), function (dataIdx) {\n      elSetState(data.getItemGraphicEl(dataIdx), state, highlightDigit);\n    });\n  } else {\n    data.eachItemGraphicEl(function (el) {\n      elSetState(el, state, highlightDigit);\n    });\n  }\n} // Enable Chart.extend.\n\n\nclazzUtil.enableClassExtend(Chart, ['dispose']); // Add capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.\n\nclazzUtil.enableClassManagement(Chart, {\n  registerWhenExtend: true\n});\n\nChart.markUpdateMethod = function (payload, methodName) {\n  inner(payload).updateMethod = methodName;\n};\n\nfunction renderTaskPlan(context) {\n  return renderPlanner(context.model);\n}\n\nfunction renderTaskReset(context) {\n  var seriesModel = context.model;\n  var ecModel = context.ecModel;\n  var api = context.api;\n  var payload = context.payload; // ???! remove updateView updateVisual\n\n  var progressiveRender = seriesModel.pipelineContext.progressiveRender;\n  var view = context.view;\n  var updateMethod = payload && inner(payload).updateMethod;\n  var methodName = progressiveRender ? 'incrementalPrepareRender' : updateMethod && view[updateMethod] ? updateMethod // `appendData` is also supported when data amount\n  // is less than progressive threshold.\n  : 'render';\n\n  if (methodName !== 'render') {\n    view[methodName](seriesModel, ecModel, api, payload);\n  }\n\n  return progressMethodMap[methodName];\n}\n\nvar progressMethodMap = {\n  incrementalPrepareRender: {\n    progress: function progress(params, context) {\n      context.view.incrementalRender(params, context.model, context.ecModel, context.api, context.payload);\n    }\n  },\n  render: {\n    // Put view.render in `progress` to support appendData. But in this case\n    // view.render should not be called in reset, otherwise it will be called\n    // twise. Use `forceFirstProgress` to make sure that view.render is called\n    // in any cases.\n    forceFirstProgress: true,\n    progress: function progress(params, context) {\n      context.view.render(context.model, context.ecModel, context.api, context.payload);\n    }\n  }\n};\nvar _default = Chart;\nmodule.exports = _default;","map":null,"metadata":{},"sourceType":"script"}