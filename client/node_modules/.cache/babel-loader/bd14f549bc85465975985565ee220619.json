{"ast":null,"code":"var guid = require(\"./core/guid\");\n\nvar env = require(\"./core/env\");\n\nvar zrUtil = require(\"./core/util\");\n\nvar Handler = require(\"./Handler\");\n\nvar Storage = require(\"./Storage\");\n\nvar Painter = require(\"./Painter\");\n\nvar Animation = require(\"./animation/Animation\");\n\nvar HandlerProxy = require(\"./dom/HandlerProxy\");\n/*!\r\n* ZRender, a high performance 2d drawing library.\r\n*\r\n* Copyright (c) 2013, Baidu Inc.\r\n* All rights reserved.\r\n*\r\n* LICENSE\r\n* https://github.com/ecomfe/zrender/blob/master/LICENSE.txt\r\n*/\n\n\nvar useVML = !env.canvasSupported;\nvar painterCtors = {\n  canvas: Painter\n};\nvar instances = {}; // ZRender实例map索引\n\n/**\r\n * @type {string}\r\n */\n\nvar version = '4.3.2';\n/**\r\n * Initializing a zrender instance\r\n * @param {HTMLElement} dom\r\n * @param {Object} [opts]\r\n * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'\r\n * @param {number} [opts.devicePixelRatio]\r\n * @param {number|string} [opts.width] Can be 'auto' (the same as null/undefined)\r\n * @param {number|string} [opts.height] Can be 'auto' (the same as null/undefined)\r\n * @return {module:zrender/ZRender}\r\n */\n\nfunction init(dom, opts) {\n  var zr = new ZRender(guid(), dom, opts);\n  instances[zr.id] = zr;\n  return zr;\n}\n/**\r\n * Dispose zrender instance\r\n * @param {module:zrender/ZRender} zr\r\n */\n\n\nfunction dispose(zr) {\n  if (zr) {\n    zr.dispose();\n  } else {\n    for (var key in instances) {\n      if (instances.hasOwnProperty(key)) {\n        instances[key].dispose();\n      }\n    }\n\n    instances = {};\n  }\n\n  return this;\n}\n/**\r\n * Get zrender instance by id\r\n * @param {string} id zrender instance id\r\n * @return {module:zrender/ZRender}\r\n */\n\n\nfunction getInstance(id) {\n  return instances[id];\n}\n\nfunction registerPainter(name, Ctor) {\n  painterCtors[name] = Ctor;\n}\n\nfunction delInstance(id) {\n  delete instances[id];\n}\n/**\r\n * @module zrender/ZRender\r\n */\n\n/**\r\n * @constructor\r\n * @alias module:zrender/ZRender\r\n * @param {string} id\r\n * @param {HTMLElement} dom\r\n * @param {Object} opts\r\n * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'\r\n * @param {number} [opts.devicePixelRatio]\r\n * @param {number} [opts.width] Can be 'auto' (the same as null/undefined)\r\n * @param {number} [opts.height] Can be 'auto' (the same as null/undefined)\r\n */\n\n\nvar ZRender = function ZRender(id, dom, opts) {\n  opts = opts || {};\n  /**\r\n   * @type {HTMLDomElement}\r\n   */\n\n  this.dom = dom;\n  /**\r\n   * @type {string}\r\n   */\n\n  this.id = id;\n  var self = this;\n  var storage = new Storage();\n  var rendererType = opts.renderer; // TODO WebGL\n\n  if (useVML) {\n    if (!painterCtors.vml) {\n      throw new Error('You need to require \\'zrender/vml/vml\\' to support IE8');\n    }\n\n    rendererType = 'vml';\n  } else if (!rendererType || !painterCtors[rendererType]) {\n    rendererType = 'canvas';\n  }\n\n  var painter = new painterCtors[rendererType](dom, storage, opts, id);\n  this.storage = storage;\n  this.painter = painter;\n  var handerProxy = !env.node && !env.worker ? new HandlerProxy(painter.getViewportRoot(), painter.root) : null;\n  this.handler = new Handler(storage, painter, handerProxy, painter.root);\n  /**\r\n   * @type {module:zrender/animation/Animation}\r\n   */\n\n  this.animation = new Animation({\n    stage: {\n      update: zrUtil.bind(this.flush, this)\n    }\n  });\n  this.animation.start();\n  /**\r\n   * @type {boolean}\r\n   * @private\r\n   */\n\n  this._needsRefresh; // 修改 storage.delFromStorage, 每次删除元素之前删除动画\n  // FIXME 有点ugly\n\n  var oldDelFromStorage = storage.delFromStorage;\n  var oldAddToStorage = storage.addToStorage;\n\n  storage.delFromStorage = function (el) {\n    oldDelFromStorage.call(storage, el);\n    el && el.removeSelfFromZr(self);\n  };\n\n  storage.addToStorage = function (el) {\n    oldAddToStorage.call(storage, el);\n    el.addSelfToZr(self);\n  };\n};\n\nZRender.prototype = {\n  constructor: ZRender,\n\n  /**\r\n   * 获取实例唯一标识\r\n   * @return {string}\r\n   */\n  getId: function getId() {\n    return this.id;\n  },\n\n  /**\r\n   * 添加元素\r\n   * @param  {module:zrender/Element} el\r\n   */\n  add: function add(el) {\n    this.storage.addRoot(el);\n    this._needsRefresh = true;\n  },\n\n  /**\r\n   * 删除元素\r\n   * @param  {module:zrender/Element} el\r\n   */\n  remove: function remove(el) {\n    this.storage.delRoot(el);\n    this._needsRefresh = true;\n  },\n\n  /**\r\n   * Change configuration of layer\r\n   * @param {string} zLevel\r\n   * @param {Object} config\r\n   * @param {string} [config.clearColor=0] Clear color\r\n   * @param {string} [config.motionBlur=false] If enable motion blur\r\n   * @param {number} [config.lastFrameAlpha=0.7] Motion blur factor. Larger value cause longer trailer\r\n  */\n  configLayer: function configLayer(zLevel, config) {\n    if (this.painter.configLayer) {\n      this.painter.configLayer(zLevel, config);\n    }\n\n    this._needsRefresh = true;\n  },\n\n  /**\r\n   * Set background color\r\n   * @param {string} backgroundColor\r\n   */\n  setBackgroundColor: function setBackgroundColor(backgroundColor) {\n    if (this.painter.setBackgroundColor) {\n      this.painter.setBackgroundColor(backgroundColor);\n    }\n\n    this._needsRefresh = true;\n  },\n\n  /**\r\n   * Repaint the canvas immediately\r\n   */\n  refreshImmediately: function refreshImmediately() {\n    // var start = new Date();\n    // Clear needsRefresh ahead to avoid something wrong happens in refresh\n    // Or it will cause zrender refreshes again and again.\n    this._needsRefresh = this._needsRefreshHover = false;\n    this.painter.refresh(); // Avoid trigger zr.refresh in Element#beforeUpdate hook\n\n    this._needsRefresh = this._needsRefreshHover = false; // var end = new Date();\n    // var log = document.getElementById('log');\n    // if (log) {\n    //     log.innerHTML = log.innerHTML + '<br>' + (end - start);\n    // }\n  },\n\n  /**\r\n   * Mark and repaint the canvas in the next frame of browser\r\n   */\n  refresh: function refresh() {\n    this._needsRefresh = true;\n  },\n\n  /**\r\n   * Perform all refresh\r\n   */\n  flush: function flush() {\n    var triggerRendered;\n\n    if (this._needsRefresh) {\n      triggerRendered = true;\n      this.refreshImmediately();\n    }\n\n    if (this._needsRefreshHover) {\n      triggerRendered = true;\n      this.refreshHoverImmediately();\n    }\n\n    triggerRendered && this.trigger('rendered');\n  },\n\n  /**\r\n   * Add element to hover layer\r\n   * @param  {module:zrender/Element} el\r\n   * @param {Object} style\r\n   */\n  addHover: function addHover(el, style) {\n    if (this.painter.addHover) {\n      var elMirror = this.painter.addHover(el, style);\n      this.refreshHover();\n      return elMirror;\n    }\n  },\n\n  /**\r\n   * Add element from hover layer\r\n   * @param  {module:zrender/Element} el\r\n   */\n  removeHover: function removeHover(el) {\n    if (this.painter.removeHover) {\n      this.painter.removeHover(el);\n      this.refreshHover();\n    }\n  },\n\n  /**\r\n   * Clear all hover elements in hover layer\r\n   * @param  {module:zrender/Element} el\r\n   */\n  clearHover: function clearHover() {\n    if (this.painter.clearHover) {\n      this.painter.clearHover();\n      this.refreshHover();\n    }\n  },\n\n  /**\r\n   * Refresh hover in next frame\r\n   */\n  refreshHover: function refreshHover() {\n    this._needsRefreshHover = true;\n  },\n\n  /**\r\n   * Refresh hover immediately\r\n   */\n  refreshHoverImmediately: function refreshHoverImmediately() {\n    this._needsRefreshHover = false;\n    this.painter.refreshHover && this.painter.refreshHover();\n  },\n\n  /**\r\n   * Resize the canvas.\r\n   * Should be invoked when container size is changed\r\n   * @param {Object} [opts]\r\n   * @param {number|string} [opts.width] Can be 'auto' (the same as null/undefined)\r\n   * @param {number|string} [opts.height] Can be 'auto' (the same as null/undefined)\r\n   */\n  resize: function resize(opts) {\n    opts = opts || {};\n    this.painter.resize(opts.width, opts.height);\n    this.handler.resize();\n  },\n\n  /**\r\n   * Stop and clear all animation immediately\r\n   */\n  clearAnimation: function clearAnimation() {\n    this.animation.clear();\n  },\n\n  /**\r\n   * Get container width\r\n   */\n  getWidth: function getWidth() {\n    return this.painter.getWidth();\n  },\n\n  /**\r\n   * Get container height\r\n   */\n  getHeight: function getHeight() {\n    return this.painter.getHeight();\n  },\n\n  /**\r\n   * Export the canvas as Base64 URL\r\n   * @param {string} type\r\n   * @param {string} [backgroundColor='#fff']\r\n   * @return {string} Base64 URL\r\n   */\n  // toDataURL: function(type, backgroundColor) {\n  //     return this.painter.getRenderedCanvas({\n  //         backgroundColor: backgroundColor\n  //     }).toDataURL(type);\n  // },\n\n  /**\r\n   * Converting a path to image.\r\n   * It has much better performance of drawing image rather than drawing a vector path.\r\n   * @param {module:zrender/graphic/Path} e\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\n  pathToImage: function pathToImage(e, dpr) {\n    return this.painter.pathToImage(e, dpr);\n  },\n\n  /**\r\n   * Set default cursor\r\n   * @param {string} [cursorStyle='default'] 例如 crosshair\r\n   */\n  setCursorStyle: function setCursorStyle(cursorStyle) {\n    this.handler.setCursorStyle(cursorStyle);\n  },\n\n  /**\r\n   * Find hovered element\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @return {Object} {target, topTarget}\r\n   */\n  findHover: function findHover(x, y) {\n    return this.handler.findHover(x, y);\n  },\n\n  /**\r\n   * Bind event\r\n   *\r\n   * @param {string} eventName Event name\r\n   * @param {Function} eventHandler Handler function\r\n   * @param {Object} [context] Context object\r\n   */\n  on: function on(eventName, eventHandler, context) {\n    this.handler.on(eventName, eventHandler, context);\n  },\n\n  /**\r\n   * Unbind event\r\n   * @param {string} eventName Event name\r\n   * @param {Function} [eventHandler] Handler function\r\n   */\n  off: function off(eventName, eventHandler) {\n    this.handler.off(eventName, eventHandler);\n  },\n\n  /**\r\n   * Trigger event manually\r\n   *\r\n   * @param {string} eventName Event name\r\n   * @param {event=} event Event object\r\n   */\n  trigger: function trigger(eventName, event) {\n    this.handler.trigger(eventName, event);\n  },\n\n  /**\r\n   * Clear all objects and the canvas.\r\n   */\n  clear: function clear() {\n    this.storage.delRoot();\n    this.painter.clear();\n  },\n\n  /**\r\n   * Dispose self.\r\n   */\n  dispose: function dispose() {\n    this.animation.stop();\n    this.clear();\n    this.storage.dispose();\n    this.painter.dispose();\n    this.handler.dispose();\n    this.animation = this.storage = this.painter = this.handler = null;\n    delInstance(this.id);\n  }\n};\nexports.version = version;\nexports.init = init;\nexports.dispose = dispose;\nexports.getInstance = getInstance;\nexports.registerPainter = registerPainter;","map":null,"metadata":{},"sourceType":"script"}