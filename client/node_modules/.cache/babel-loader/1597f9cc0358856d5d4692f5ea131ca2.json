{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\ducbang\\\\Desktop\\\\12345\\\\employee\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Users\\\\ducbang\\\\Desktop\\\\12345\\\\employee\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\ducbang\\\\Desktop\\\\12345\\\\employee\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\ducbang\\\\Desktop\\\\12345\\\\employee\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\ducbang\\\\Desktop\\\\12345\\\\employee\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\ducbang\\\\Desktop\\\\12345\\\\employee\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\ducbang\\\\Desktop\\\\12345\\\\employee\\\\client\\\\src\\\\app\\\\views\\\\page-layouts\\\\UserProfile.jsx\";\nimport React, { Component, Fragment } from \"react\";\nimport UploadForm from \"./UploadForm\";\nimport ConstantList from \"../../appConfig\";\nimport { Card, Icon, Avatar, Grid, Select, FormControl, Divider, IconButton, Button, withStyles, InputLabel, FormControlLabel, TextField, Checkbox } from \"@material-ui/core\";\nimport DummyChart from \"./DummyChart\";\nimport ProfileBarChart from \"./ProfileBarChart\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport localStorageService from \"../../services/localStorageService\";\nimport { useTranslation, withTranslation, Trans, t } from \"react-i18next\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { getCurrentUser, saveItem, saveUser, getUserByUsername, saveOrUpdateUser, getListHealthOrgByUser } from \"./UserProfileService\";\nimport UploadCropImagePopup from \"./UploadCropImagePopup\";\nimport ChangePasswordDiaglog from \"./ChangePasswordPopup\";\nimport authService from \"../../services/jwtAuthService\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"../../../styles/views/_style.scss\";\nvar API_PATH = ConstantList.API_ENPOINT + \"/api/fileUpload/\";\ntoast.configure({\n  autoClose: 1000,\n  draggable: false,\n  limit: 3\n});\n\nvar UserProfile = /*#__PURE__*/function (_Component) {\n  _inherits(UserProfile, _Component);\n\n  function UserProfile() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, UserProfile);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(UserProfile)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      open: true,\n      user: {},\n      healthOrg: {},\n      shouldOpenImageDialog: false,\n      shouldOpenPasswordDialog: false,\n      checkHealthOrg: false,\n      name: \"\",\n      taxCodeOfTheUnit: \"\",\n      code: \"\",\n      specifyTestPurpose: \"\",\n      address: \"\",\n      specifyLevel: \"\",\n      positiveAffirmativeRight: true,\n      shouldOpenSearchDialog: false,\n      shouldOpenConfirmationDialog: false,\n      qualificationSelect: [],\n      qualification: {},\n      officerPosion: \"\",\n      unitCodeOfProgramPEQAS: \"\",\n      testpurposeSelect: [],\n      testPurpose1: {},\n      testPurpose2: {},\n      testPurpose3: {},\n      testPurpose4: {},\n      levelHealOrg: [],\n      healthOrgTypeSelect: [],\n      healthOrgType: [],\n      administrativeUnit: \"\",\n      fax: \"\",\n      isView: false,\n      shouldOpenAdministrativeUnitsPopup: false,\n      level: {},\n      sampleReceiptDate: new Date(),\n      sampleRecipient: \"\",\n      specifySampleStatus: \"\",\n      specifyQualification: \"\",\n      isManualSetCode: false,\n      hasErrorLever: false,\n      levelId: \"\",\n      loading: false\n    };\n\n    _this.toggleSidenav = function () {\n      _this.setState({\n        open: !_this.state.open\n      });\n    };\n\n    _this.handleWindowResize = function () {\n      return function (event) {\n        if (event.target.innerWidth < 768) {\n          _this.setState({\n            mobile: true\n          });\n        } else _this.setState({\n          mobile: false\n        });\n      };\n    };\n\n    _this.handleChange = function (event, source) {\n      event.persist();\n\n      if (source === \"displayName\") {\n        var person = _this.state.person;\n        person = person ? person : {};\n        person.displayName = event.target.value;\n\n        _this.setState({\n          person: person\n        }); // this.setState({ person: person });\n\n\n        return;\n      }\n\n      if (source === \"firstName\") {\n        var _this$state = _this.state,\n            _person = _this$state.person,\n            displayName = _this$state.displayName,\n            healthOrg = _this$state.healthOrg;\n\n        if (_this.state.person != null && _this.state.person.lastName != null && _this.state.person.lastName != \"\") {\n          _person.displayName = event.target.value + \" \" + _this.state.person.lastName;\n          displayName = event.target.value + \" \" + _this.state.person.lastName;\n        } else {\n          _person.displayName = event.target.value + \"\";\n          displayName = event.target.value + \"\";\n        }\n\n        _person = _person ? _person : {};\n        healthOrg = healthOrg ? healthOrg : {};\n        _person.firstName = event.target.value;\n        healthOrg.name = displayName;\n\n        _this.setState({\n          healthOrg: healthOrg,\n          person: _person,\n          displayName: displayName\n        });\n\n        return;\n      }\n\n      if (source === \"lastName\") {\n        var _this$state2 = _this.state,\n            _person2 = _this$state2.person,\n            _displayName = _this$state2.displayName,\n            _healthOrg = _this$state2.healthOrg;\n        _person2 = _person2 ? _person2 : {};\n        _healthOrg = _healthOrg ? _healthOrg : {};\n\n        if (_this.state.person != null && _this.state.person.firstName != null && _this.state.person.firstName != \"\") {\n          _person2.displayName = _this.state.person.firstName + \" \" + event.target.value;\n          _displayName = _this.state.person.firstName + \" \" + event.target.value;\n        } else {\n          _person2.displayName = \"\" + event.target.value;\n          _displayName = \"\" + event.target.value;\n        }\n\n        _person2.lastName = event.target.value;\n        _healthOrg.name = _displayName;\n\n        _this.setState({\n          healthOrg: _healthOrg,\n          person: _person2,\n          displayName: _displayName\n        });\n\n        return;\n      }\n\n      if (source === \"gender\") {\n        var _person3 = _this.state.person;\n        _person3 = _person3 ? _person3 : {};\n        _person3.gender = event.target.value;\n\n        _this.setState({\n          person: _person3\n        });\n\n        return;\n      }\n\n      _this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    _this.handleOpenUploadDialog = function () {\n      _this.setState({\n        shouldOpenImageDialog: true\n      });\n    };\n\n    _this.handleDialogClose = function () {\n      _this.setState({\n        shouldOpenImageDialog: false\n      });\n    };\n\n    _this.handleOpenPasswordDialog = function () {\n      _this.setState({\n        shouldOpenPasswordDialog: true\n      });\n    };\n\n    _this.handleDialogPasswordClose = function () {\n      _this.setState({\n        shouldOpenPasswordDialog: false\n      });\n    };\n\n    _this.openPasswordDialog = function () {\n      _this.setState({\n        shouldOpenPasswordDialog: true\n      });\n    };\n\n    _this.handleUpdate = function (blobValue) {\n      var t = _this.props.t;\n      var url = ConstantList.API_ENPOINT + \"/api/users/updateavatar\";\n      var formData = new FormData();\n      formData.set(\"uploadfile\", blobValue); //formData.append('uploadfile',file);//Lưu ý tên 'uploadfile' phải trùng với tham số bên Server side\n\n      var config = {\n        headers: {\n          \"Content-Type\": \"image/jpg\"\n        }\n      };\n      return axios.post(url, formData, config).then(function (response) {\n        toast.success(t(\"update_success_message\"));\n        var user = response.data;\n\n        _this.setState({\n          user: user\n        });\n\n        authService.setLoginUser(user);\n\n        _this.handleDialogClose();\n      }).catch(function () {\n        toast.warning(t(\"error_update_image\"));\n      });\n    };\n\n    _this.handleFormSubmit = function () {\n      var _this$state3 = _this.state,\n          id = _this$state3.id,\n          healthOrg = _this$state3.healthOrg,\n          checkHealthOrg = _this$state3.checkHealthOrg;\n      var t = _this.props.t; // console.log(healthOrg, checkHealthOrg);\n      // this.setState({isView: true});\n\n      if (id) {\n        saveOrUpdateUser(_objectSpread({}, _this.state)).then(function (data) {\n          toast.success(t(\"mess_edit\"));\n        });\n      } else {\n        saveOrUpdateUser(_objectSpread({}, _this.state)).then(function (data) {\n          _this.setState({\n            isView: true\n          });\n\n          toast.success(t(\"mess_add\"));\n        });\n      }\n\n      if (checkHealthOrg && healthOrg != null) {\n        saveItem(healthOrg).then(function () {});\n      }\n    };\n\n    _this.handleFormSubmitAdmin = function () {\n      var _this$state4 = _this.state,\n          id = _this$state4.id,\n          code = _this$state4.code,\n          isManualSetCode = _this$state4.isManualSetCode,\n          email = _this$state4.email,\n          hasErrorLever = _this$state4.hasErrorLever,\n          levelId = _this$state4.levelId;\n      var t = _this.props.t;\n\n      _this.setState({\n        loading: true\n      }); // if(levelId == \"\" ){\n      //   this.setState({hasErrorLever: true, loading:false});\n      //   return\n      // }\n\n\n      if (email != null) {// checkEmail(id, email).then((res) => {\n        //   if (res.data) {\n        //     toast.warning(t(\"sign_up.duplicate_email\"));\n        //     this.setState({ loading: false });\n        //     return;\n        //   }\n        // } else {\n        //   if (id) {\n        //     saveItemHealthOrg({\n        //       ...this.state,\n        //     }).then(() => {\n        //       // this.props.handleOKEditClose();\n        //       this.setState({ loading: false });\n        //       toast.success(t(\"mess_edit\"));\n        //     });\n        //   }\n        //   // console.log(123);\n        // }\n        // });\n      } // console.log(this.state);\n\n    };\n\n    return _this;\n  }\n\n  _createClass(UserProfile, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var checkHealthOrg = false;\n      var healthOrg = this.state.healthOrg;\n      getCurrentUser().then(function (_ref) {\n        var data = _ref.data;\n        data.roles.forEach(function (res) {\n          if (res.name == \"ROLE_HEALTH_ORG\" && res.authority == \"ROLE_HEALTH_ORG\") {\n            checkHealthOrg = true;\n          }\n        });\n\n        if (checkHealthOrg) {\n          getListHealthOrgByUser(data.id).then(function (listHealthOrg) {\n            healthOrg = listHealthOrg.data[0];\n\n            _this2.setState({\n              healthOrg: healthOrg\n            }, function () {});\n          });\n        }\n\n        _this2.setState({\n          user: data,\n          checkHealthOrg: checkHealthOrg\n        }, function () {// console.log(this.state.user)\n        });\n\n        _this2.setState(_objectSpread({}, data));\n      });\n      var user = localStorageService.getLoginUser();\n\n      if (window.innerWidth < 768) {\n        this.setState({\n          open: false\n        });\n      }\n\n      if (window) this.windowResizeListener = window.addEventListener(\"resize\", function (event) {\n        if (event.target.innerWidth < 768) {\n          _this2.setState({\n            open: false\n          });\n        } else _this2.setState({\n          open: true\n        });\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var user = localStorageService.getLoginUser();\n      getCurrentUser();\n      this.setState({\n        user: user\n      });\n      this.setState(user);\n      if (window) window.removeEventListener(\"resize\", this.windowResizeListener);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$state5 = this.state,\n          open = _this$state5.open,\n          email = _this$state5.email,\n          contactPhone = _this$state5.contactPhone,\n          contactName = _this$state5.contactName,\n          user = _this$state5.user,\n          healthOrg = _this$state5.healthOrg,\n          shouldOpenImageDialog = _this$state5.shouldOpenImageDialog,\n          shouldOpenPasswordDialog = _this$state5.shouldOpenPasswordDialog,\n          checkHealthOrg = _this$state5.checkHealthOrg,\n          name = _this$state5.name,\n          taxCodeOfTheUnit = _this$state5.taxCodeOfTheUnit,\n          code = _this$state5.code,\n          specifyTestPurpose = _this$state5.specifyTestPurpose,\n          address = _this$state5.address,\n          specifyLevel = _this$state5.specifyLevel,\n          positiveAffirmativeRight = _this$state5.positiveAffirmativeRight,\n          isManualSetCode = _this$state5.isManualSetCode,\n          hasErrorLever = _this$state5.hasErrorLever,\n          levelId = _this$state5.levelId,\n          loading = _this$state5.loading;\n      var theme = this.props.theme;\n      var _this$props = this.props,\n          t = _this$props.t,\n          i18n = _this$props.i18n; // console.log(checkHealthOrg);\n\n      var genders = [{\n        id: \"M\",\n        name: \"Nam\"\n      }, {\n        id: \"F\",\n        name: \"Nữ\"\n      }, {\n        id: \"U\",\n        name: \"Không rõ\"\n      }]; // console.log(user);\n      //alert('Render');\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"m-sm-30\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 7\n        }\n      }, this.state.shouldOpenImageDialog && /*#__PURE__*/React.createElement(UploadCropImagePopup, {\n        t: t,\n        i18n: i18n,\n        handleClose: this.handleDialogClose,\n        handleUpdate: this.handleUpdate,\n        open: this.state.shouldOpenImageDialog,\n        uploadUrl: API_PATH + \"avatarUpload\",\n        acceptType: \"png;jpg;gif;jpeg\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 11\n        }\n      }), this.state.shouldOpenPasswordDialog && /*#__PURE__*/React.createElement(ChangePasswordDiaglog, {\n        t: t,\n        i18n: i18n,\n        handleClose: this.handleDialogPasswordClose,\n        handleUpdate: this.handleUpdate,\n        open: this.state.shouldOpenPasswordDialog,\n        uploadUrl: API_PATH + \"avatarUpload\",\n        acceptType: \"png;jpg;gif;jpeg\",\n        user: user,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"styleColor\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 13\n        }\n      }, checkHealthOrg ? t(\"user.healthOrg\") : t(\"user.person_info\"))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"user-profile__sidenav flex-column flex-middle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 9\n        }\n      }, this.state.user && this.state.user ? /*#__PURE__*/React.createElement(Avatar, {\n        className: \"avatar mb-20\",\n        src: ConstantList.API_ENPOINT + this.state.user.imagePath,\n        onClick: this.handleOpenUploadDialog,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 13\n        }\n      }) : /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Avatar, {\n        className: \"avatar mb-20\",\n        src: ConstantList.ROOT_PATH + \"assets/images/avatar.jpg\",\n        onClick: this.handleOpenUploadDialog,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 13\n        }\n      }, \" \", this.state.displayName != null ? this.state.displayName : \"\", \" \")), !checkHealthOrg && /*#__PURE__*/React.createElement(ValidatorForm, {\n        ref: \"form\",\n        onSubmit: this.handleFormSubmit,\n        style: {\n          overflowY: \"auto\",\n          display: \"flex\",\n          flexDirection: \"column\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"m-sm-30\",\n        t: t,\n        i18n: i18n,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        className: \"mb-8 mt-8\",\n        container: true,\n        spacing: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        id: \"standard-basic\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 445,\n            columnNumber: 23\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 446,\n            columnNumber: 25\n          }\n        }, \" * \"), t(\"user.firstName\")),\n        value: this.state.person != null ? this.state.person.firstName : \"\",\n        onChange: function onChange(firstName) {\n          return _this3.handleChange(firstName, \"firstName\");\n        },\n        size: \"small\",\n        variant: \"outlined\",\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        className: \"w-100\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 19\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        [\"item\"]: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        id: \"standard-basic\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 23\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 25\n          }\n        }, \" * \"), t(\"user.lastName\")),\n        size: \"small\",\n        variant: \"outlined\",\n        value: this.state.person != null ? this.state.person.lastName : \"\",\n        onChange: function onChange(lastName) {\n          return _this3.handleChange(lastName, \"lastName\");\n        },\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        className: \"w-100\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 19\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        [\"item\"]: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        id: \"standard-basic\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 495,\n            columnNumber: 23\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 496,\n            columnNumber: 25\n          }\n        }, \" * \"), t(\"user.displayName\")),\n        size: \"small\",\n        variant: \"outlined\",\n        value: this.state.displayName != null ? this.state.displayName : \"\",\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        className: \"w-100\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 19\n        }\n      }))), /*#__PURE__*/React.createElement(Grid, {\n        className: \"mb-10\",\n        container: true,\n        spacing: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        fullWidth: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        id: \"standard-basic\",\n        label: t('user.email'),\n        value: this.state.email != null ? user.email : '',\n        onChange: this.handleChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 523,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 527,\n            columnNumber: 23\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 528,\n            columnNumber: 25\n          }\n        }, \" * \"), t(\"user.email\")),\n        size: \"small\",\n        variant: \"outlined\",\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"email\",\n        value: this.state.email ? this.state.email : \"\",\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 524,\n          columnNumber: 19\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100\",\n        size: \"small\",\n        variant: \"outlined\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 548,\n            columnNumber: 28\n          }\n        }, t(\"user.username\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"username\",\n        value: this.state.username ? this.state.username : \"\",\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        disabled: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 19\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        fullWidth: true,\n        size: \"small\",\n        variant: \"outlined\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"gender-simple\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"font\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 562,\n          columnNumber: 24\n        }\n      }, t(\"user.gender\"))), /*#__PURE__*/React.createElement(Select, {\n        value: this.state.person ? this.state.person.gender : \"\",\n        onChange: function onChange(gender) {\n          return _this3.handleChange(gender, \"gender\");\n        },\n        inputProps: {\n          name: \"gender\",\n          id: \"gender-simple\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 564,\n          columnNumber: 21\n        }\n      }, genders.map(function (item) {\n        return /*#__PURE__*/React.createElement(MenuItem, {\n          key: item.id,\n          value: item.id,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 574,\n            columnNumber: 27\n          }\n        }, item.name);\n      }))))), /*#__PURE__*/React.createElement(Grid, {\n        className: \"mb-10\",\n        style: {\n          textAlign: \"right\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 584,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        type: \"submit\",\n        className: \"mr-16\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 585,\n          columnNumber: 17\n        }\n      }, t(\"general.update\")), /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        type: \"button\",\n        onClick: function onClick() {\n          return _this3.openPasswordDialog();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 593,\n          columnNumber: 17\n        }\n      }, t(\"user.changePass\"))))), checkHealthOrg && /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 606,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(ValidatorForm, {\n        ref: \"form\",\n        onSubmit: this.handleFormSubmitAdmin,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 607,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        className: \"\",\n        container: true,\n        spacing: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 608,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 609,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 \",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 613,\n            columnNumber: 23\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 614,\n            columnNumber: 25\n          }\n        }, \" * \"), t(\"EQAHealthOrg.Name\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"name\",\n        value: name,\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 610,\n          columnNumber: 19\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 628,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 \",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 632,\n            columnNumber: 23\n          }\n        }, t(\"EQAHealthOrg.Code\")),\n        onChange: this.handleChange,\n        disabled: !isManualSetCode,\n        type: \"text\",\n        name: \"code\",\n        value: code,\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 629,\n          columnNumber: 19\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 643,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 \",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 647,\n            columnNumber: 23\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 648,\n            columnNumber: 25\n          }\n        }, \" * \"), t(\"EQAHealthOrg.Address\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"address\",\n        value: address,\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 644,\n          columnNumber: 19\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 663,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 \",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 667,\n            columnNumber: 23\n          }\n        }, t(\"EQAHealthOrg.contactPhone\")),\n        onChange: this.handleChange,\n        type: \"number\",\n        name: \"contactPhone\",\n        value: contactPhone ? contactPhone : \"\",\n        variant: \"outlined\",\n        size: \"small\",\n        validators: [\"matchRegexp:^[0-9]*$\", \"isLengthNumber\"],\n        errorMessages: [t(\"general.errorMessages_phone_number_invalid\"), t(\"general.errorMessages_phone_number_invalid\")],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 664,\n          columnNumber: 19\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 682,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 \",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 686,\n            columnNumber: 23\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 687,\n            columnNumber: 25\n          }\n        }, \" * \"), t(\"EQAHealthOrg.email\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"email\",\n        value: email ? email : \"\",\n        validators: [\"required\", \"isEmail\"],\n        errorMessages: [t(\"general.errorMessages_required\"), t(\"general.errorMessages_email_valid\")],\n        variant: \"outlined\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 683,\n          columnNumber: 19\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 704,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 \",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 708,\n            columnNumber: 23\n          }\n        }, t(\"EQAHealthOrg.ContactName\")),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"contactName\",\n        value: contactName ? contactName : \"\",\n        variant: \"outlined\",\n        size: \"small\",\n        validators: [\"required\"],\n        errorMessages: [t(\"general.errorMessages_required\")],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 705,\n          columnNumber: 19\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        lg: 4,\n        md: 4,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 722,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(FormControlLabel, {\n        disabled: true,\n        variant: \"outlined\",\n        size: \"small\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            fontSize: \"115%\"\n          },\n          className: \"font\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 728,\n            columnNumber: 23\n          }\n        }, t(\"EQAHealthOrg.positiveAffirmativeRight\")),\n        control: /*#__PURE__*/React.createElement(Checkbox, {\n          checked: positiveAffirmativeRight,\n          onChange: function onChange(positiveAffirmativeRight) {\n            return _this3.handleChange(positiveAffirmativeRight, \"positiveAffirmativeRight\");\n          } // this.handleChange(isFinalResult, 'isFinalResult')\n          ,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 733,\n            columnNumber: 23\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 723,\n          columnNumber: 19\n        }\n      }))), /*#__PURE__*/React.createElement(Grid, {\n        className: \"flex flex-end flex-middle\",\n        container: true,\n        spacing: 4,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 748,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        type: \"submit\",\n        className: \"mr-16\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 749,\n          columnNumber: 17\n        }\n      }, t(\"update\")), /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        type: \"button\",\n        onClick: function onClick() {\n          return _this3.openPasswordDialog();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 752,\n          columnNumber: 17\n        }\n      }, t(\"user.changePass\"))))));\n    }\n  }]);\n\n  return UserProfile;\n}(Component);\n\nexport default withStyles({}, {\n  withTheme: true\n})(UserProfile);","map":{"version":3,"sources":["C:/Users/ducbang/Desktop/12345/employee/client/src/app/views/page-layouts/UserProfile.jsx"],"names":["React","Component","Fragment","UploadForm","ConstantList","Card","Icon","Avatar","Grid","Select","FormControl","Divider","IconButton","Button","withStyles","InputLabel","FormControlLabel","TextField","Checkbox","DummyChart","ProfileBarChart","ValidatorForm","TextValidator","localStorageService","useTranslation","withTranslation","Trans","t","MenuItem","getCurrentUser","saveItem","saveUser","getUserByUsername","saveOrUpdateUser","getListHealthOrgByUser","UploadCropImagePopup","ChangePasswordDiaglog","authService","axios","toast","API_PATH","API_ENPOINT","configure","autoClose","draggable","limit","UserProfile","state","open","user","healthOrg","shouldOpenImageDialog","shouldOpenPasswordDialog","checkHealthOrg","name","taxCodeOfTheUnit","code","specifyTestPurpose","address","specifyLevel","positiveAffirmativeRight","shouldOpenSearchDialog","shouldOpenConfirmationDialog","qualificationSelect","qualification","officerPosion","unitCodeOfProgramPEQAS","testpurposeSelect","testPurpose1","testPurpose2","testPurpose3","testPurpose4","levelHealOrg","healthOrgTypeSelect","healthOrgType","administrativeUnit","fax","isView","shouldOpenAdministrativeUnitsPopup","level","sampleReceiptDate","Date","sampleRecipient","specifySampleStatus","specifyQualification","isManualSetCode","hasErrorLever","levelId","loading","toggleSidenav","setState","handleWindowResize","event","target","innerWidth","mobile","handleChange","source","persist","person","displayName","value","lastName","firstName","gender","handleOpenUploadDialog","handleDialogClose","handleOpenPasswordDialog","handleDialogPasswordClose","openPasswordDialog","handleUpdate","blobValue","props","url","formData","FormData","set","config","headers","post","then","response","success","data","setLoginUser","catch","warning","handleFormSubmit","id","handleFormSubmitAdmin","email","roles","forEach","res","authority","listHealthOrg","getLoginUser","window","windowResizeListener","addEventListener","removeEventListener","contactPhone","contactName","theme","i18n","genders","imagePath","ROOT_PATH","overflowY","display","flexDirection","color","username","map","item","textAlign","fontSize","withTheme"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\r\nimport UploadForm from \"./UploadForm\";\r\nimport ConstantList from \"../../appConfig\";\r\nimport {\r\n  Card,\r\n  Icon,\r\n  Avatar,\r\n  Grid,\r\n  Select,\r\n  FormControl,\r\n  Divider,\r\n  IconButton,\r\n  Button,\r\n  withStyles,\r\n  InputLabel,\r\n  FormControlLabel,\r\n  TextField,\r\n  Checkbox,\r\n} from \"@material-ui/core\";\r\nimport DummyChart from \"./DummyChart\";\r\nimport ProfileBarChart from \"./ProfileBarChart\";\r\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\r\nimport localStorageService from \"../../services/localStorageService\";\r\nimport { useTranslation, withTranslation, Trans, t } from \"react-i18next\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport {\r\n  getCurrentUser,\r\n  saveItem,\r\n  saveUser,\r\n  getUserByUsername,\r\n  saveOrUpdateUser,\r\n  getListHealthOrgByUser,\r\n} from \"./UserProfileService\";\r\nimport UploadCropImagePopup from \"./UploadCropImagePopup\";\r\nimport ChangePasswordDiaglog from \"./ChangePasswordPopup\";\r\nimport authService from \"../../services/jwtAuthService\";\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../../styles/views/_style.scss\";\r\nconst API_PATH = ConstantList.API_ENPOINT + \"/api/fileUpload/\";\r\n\r\ntoast.configure({\r\n  autoClose: 1000,\r\n  draggable: false,\r\n  limit: 3,\r\n});\r\nclass UserProfile extends Component {\r\n  state = {\r\n    open: true,\r\n    user: {},\r\n    healthOrg: {},\r\n    shouldOpenImageDialog: false,\r\n    shouldOpenPasswordDialog: false,\r\n    checkHealthOrg: false,\r\n    name: \"\",\r\n    taxCodeOfTheUnit: \"\",\r\n    code: \"\",\r\n    specifyTestPurpose: \"\",\r\n    address: \"\",\r\n    specifyLevel: \"\",\r\n    positiveAffirmativeRight: true,\r\n    shouldOpenSearchDialog: false,\r\n    shouldOpenConfirmationDialog: false,\r\n    qualificationSelect: [],\r\n    qualification: {},\r\n    officerPosion: \"\",\r\n    unitCodeOfProgramPEQAS: \"\",\r\n    testpurposeSelect: [],\r\n    testPurpose1: {},\r\n    testPurpose2: {},\r\n    testPurpose3: {},\r\n    testPurpose4: {},\r\n    levelHealOrg: [],\r\n    healthOrgTypeSelect: [],\r\n    healthOrgType: [],\r\n    administrativeUnit: \"\",\r\n    fax: \"\",\r\n    isView: false,\r\n    shouldOpenAdministrativeUnitsPopup: false,\r\n    level: {},\r\n    sampleReceiptDate: new Date(),\r\n    sampleRecipient: \"\",\r\n    specifySampleStatus: \"\",\r\n    specifyQualification: \"\",\r\n    isManualSetCode: false,\r\n    hasErrorLever: false,\r\n    levelId: \"\",\r\n    loading: false,\r\n  };\r\n\r\n  windowResizeListener;\r\n\r\n  toggleSidenav = () => {\r\n    this.setState({\r\n      open: !this.state.open,\r\n    });\r\n  };\r\n\r\n  handleWindowResize = () => {\r\n    return (event) => {\r\n      if (event.target.innerWidth < 768) {\r\n        this.setState({ mobile: true });\r\n      } else this.setState({ mobile: false });\r\n    };\r\n  };\r\n\r\n  componentDidMount() {\r\n    let checkHealthOrg = false;\r\n    let { healthOrg } = this.state;\r\n    getCurrentUser().then(({ data }) => {\r\n      data.roles.forEach((res) => {\r\n        if (\r\n          res.name == \"ROLE_HEALTH_ORG\" &&\r\n          res.authority == \"ROLE_HEALTH_ORG\"\r\n        ) {\r\n          checkHealthOrg = true;\r\n        }\r\n      });\r\n      if (checkHealthOrg) {\r\n        getListHealthOrgByUser(data.id).then((listHealthOrg) => {\r\n          healthOrg = listHealthOrg.data[0];\r\n          this.setState({ healthOrg: healthOrg }, () => {});\r\n        });\r\n      }\r\n\r\n      this.setState({ user: data, checkHealthOrg: checkHealthOrg }, () => {\r\n        // console.log(this.state.user)\r\n      });\r\n      this.setState({ ...data });\r\n    });\r\n    let user = localStorageService.getLoginUser();\r\n    if (window.innerWidth < 768) {\r\n      this.setState({ open: false });\r\n    }\r\n    if (window)\r\n      this.windowResizeListener = window.addEventListener(\"resize\", (event) => {\r\n        if (event.target.innerWidth < 768) {\r\n          this.setState({ open: false });\r\n        } else this.setState({ open: true });\r\n      });\r\n    \r\n  }\r\n  handleChange = (event, source) => {\r\n    event.persist();\r\n\r\n    if (source === \"displayName\") {\r\n      let { person } = this.state;\r\n      person = person ? person : {};\r\n      person.displayName = event.target.value;\r\n      this.setState({ person: person });\r\n      // this.setState({ person: person });\r\n      return;\r\n    }\r\n    if (source === \"firstName\") {\r\n      let { person, displayName, healthOrg } = this.state;\r\n      if (\r\n        this.state.person != null &&\r\n        this.state.person.lastName != null &&\r\n        this.state.person.lastName != \"\"\r\n      ) {\r\n        person.displayName =\r\n          event.target.value + \" \" + this.state.person.lastName;\r\n        displayName = event.target.value + \" \" + this.state.person.lastName;\r\n      } else {\r\n        person.displayName = event.target.value + \"\";\r\n        displayName = event.target.value + \"\";\r\n      }\r\n      person = person ? person : {};\r\n      healthOrg = healthOrg ? healthOrg : {};\r\n      person.firstName = event.target.value;\r\n      healthOrg.name = displayName;\r\n      this.setState({\r\n        healthOrg: healthOrg,\r\n        person: person,\r\n        displayName: displayName,\r\n      });\r\n      return;\r\n    }\r\n    if (source === \"lastName\") {\r\n      let { person, displayName, healthOrg } = this.state;\r\n      person = person ? person : {};\r\n      healthOrg = healthOrg ? healthOrg : {};\r\n      if (\r\n        this.state.person != null &&\r\n        this.state.person.firstName != null &&\r\n        this.state.person.firstName != \"\"\r\n      ) {\r\n        person.displayName =\r\n          this.state.person.firstName + \" \" + event.target.value;\r\n        displayName = this.state.person.firstName + \" \" + event.target.value;\r\n      } else {\r\n        person.displayName = \"\" + event.target.value;\r\n        displayName = \"\" + event.target.value;\r\n      }\r\n      person.lastName = event.target.value;\r\n      healthOrg.name = displayName;\r\n      this.setState({\r\n        healthOrg: healthOrg,\r\n        person: person,\r\n        displayName: displayName,\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (source === \"gender\") {\r\n      let { person } = this.state;\r\n      person = person ? person : {};\r\n      person.gender = event.target.value;\r\n      this.setState({ person: person });\r\n      return;\r\n    }\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n  componentWillUnmount() {\r\n    let user = localStorageService.getLoginUser();\r\n    getCurrentUser();\r\n    this.setState({ user: user });\r\n    this.setState(user);\r\n    if (window) window.removeEventListener(\"resize\", this.windowResizeListener);\r\n  }\r\n  handleOpenUploadDialog = () => {\r\n    this.setState({\r\n      shouldOpenImageDialog: true,\r\n    });\r\n  };\r\n  handleDialogClose = () => {\r\n    this.setState({\r\n      shouldOpenImageDialog: false,\r\n    });\r\n  };\r\n  handleOpenPasswordDialog = () => {\r\n    this.setState({\r\n      shouldOpenPasswordDialog: true,\r\n    });\r\n  };\r\n  handleDialogPasswordClose = () => {\r\n    this.setState({\r\n      shouldOpenPasswordDialog: false,\r\n    });\r\n  };\r\n\r\n  openPasswordDialog = () => {\r\n    this.setState({\r\n      shouldOpenPasswordDialog: true,\r\n    });\r\n  };\r\n  handleUpdate = (blobValue) => {\r\n    let { t } = this.props;\r\n    const url = ConstantList.API_ENPOINT + \"/api/users/updateavatar\";\r\n    let formData = new FormData();\r\n    formData.set(\"uploadfile\", blobValue);\r\n    //formData.append('uploadfile',file);//Lưu ý tên 'uploadfile' phải trùng với tham số bên Server side\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"image/jpg\",\r\n      },\r\n    };\r\n    return axios\r\n      .post(url, formData, config)\r\n      .then((response) => {\r\n        toast.success(t(\"update_success_message\"));\r\n        let user = response.data;\r\n        this.setState({ user: user });\r\n        authService.setLoginUser(user);\r\n        this.handleDialogClose();\r\n      })\r\n      .catch(() => {\r\n        toast.warning(t(\"error_update_image\"));\r\n      });\r\n  };\r\n  handleFormSubmit = () => {\r\n    let { id, healthOrg, checkHealthOrg } = this.state;\r\n    let { t } = this.props;\r\n    // console.log(healthOrg, checkHealthOrg);\r\n    // this.setState({isView: true});\r\n    if (id) {\r\n      saveOrUpdateUser({\r\n        ...this.state,\r\n      }).then((data) => {\r\n        toast.success(t(\"mess_edit\"));\r\n      });\r\n    } else {\r\n      saveOrUpdateUser({\r\n        ...this.state,\r\n      }).then((data) => {\r\n        this.setState({ isView: true });\r\n        toast.success(t(\"mess_add\"));\r\n      });\r\n    }\r\n\r\n    if (checkHealthOrg && healthOrg != null) {\r\n      saveItem(healthOrg).then(() => {});\r\n    }\r\n  };\r\n  handleFormSubmitAdmin = () => {\r\n    let {\r\n      id,\r\n      code,\r\n      isManualSetCode,\r\n      email,\r\n      hasErrorLever,\r\n      levelId,\r\n    } = this.state;\r\n    let { t } = this.props;\r\n    this.setState({ loading: true });\r\n\r\n    // if(levelId == \"\" ){\r\n    //   this.setState({hasErrorLever: true, loading:false});\r\n    //   return\r\n    // }\r\n    if (email != null) {\r\n      // checkEmail(id, email).then((res) => {\r\n      //   if (res.data) {\r\n      //     toast.warning(t(\"sign_up.duplicate_email\"));\r\n      //     this.setState({ loading: false });\r\n      //     return;\r\n      //   }\r\n        // } else {\r\n        //   if (id) {\r\n        //     saveItemHealthOrg({\r\n        //       ...this.state,\r\n        //     }).then(() => {\r\n        //       // this.props.handleOKEditClose();\r\n        //       this.setState({ loading: false });\r\n        //       toast.success(t(\"mess_edit\"));\r\n        //     });\r\n        //   }\r\n        //   // console.log(123);\r\n        // }\r\n      // });\r\n    }\r\n\r\n    // console.log(this.state);\r\n  };\r\n  render() {\r\n    let {\r\n      open,\r\n      email,\r\n      contactPhone,\r\n      contactName,\r\n      user,\r\n      healthOrg,\r\n      shouldOpenImageDialog,\r\n      shouldOpenPasswordDialog,\r\n      checkHealthOrg,\r\n      name,\r\n      taxCodeOfTheUnit,\r\n      code,\r\n      specifyTestPurpose,\r\n      address,\r\n      specifyLevel,\r\n      positiveAffirmativeRight,\r\n      isManualSetCode,\r\n      hasErrorLever,\r\n      levelId,\r\n      loading,\r\n    } = this.state;\r\n    let { theme } = this.props;\r\n    let { t, i18n } = this.props;\r\n    // console.log(checkHealthOrg);\r\n    const genders = [\r\n      { id: \"M\", name: \"Nam\" },\r\n      { id: \"F\", name: \"Nữ\" },\r\n      { id: \"U\", name: \"Không rõ\" },\r\n    ];\r\n    // console.log(user);\r\n    //alert('Render');\r\n    return (\r\n      <div className=\"m-sm-30\">\r\n        {this.state.shouldOpenImageDialog && (\r\n          <UploadCropImagePopup\r\n            t={t}\r\n            i18n={i18n}\r\n            handleClose={this.handleDialogClose}\r\n            handleUpdate={this.handleUpdate}\r\n            open={this.state.shouldOpenImageDialog}\r\n            uploadUrl={API_PATH + \"avatarUpload\"}\r\n            acceptType=\"png;jpg;gif;jpeg\"\r\n          />\r\n        )}\r\n        {this.state.shouldOpenPasswordDialog && (\r\n          <ChangePasswordDiaglog\r\n            t={t}\r\n            i18n={i18n}\r\n            handleClose={this.handleDialogPasswordClose}\r\n            handleUpdate={this.handleUpdate}\r\n            open={this.state.shouldOpenPasswordDialog}\r\n            uploadUrl={API_PATH + \"avatarUpload\"}\r\n            acceptType=\"png;jpg;gif;jpeg\"\r\n            user={user}\r\n          />\r\n        )}\r\n        <div>\r\n          {\r\n            <span className=\"styleColor\">\r\n              {checkHealthOrg ? t(\"user.healthOrg\") : t(\"user.person_info\")}\r\n            </span>\r\n          }\r\n        </div>\r\n        <div className=\"user-profile__sidenav flex-column flex-middle\">\r\n          {this.state.user && this.state.user ? (\r\n            <Avatar\r\n              className=\"avatar mb-20\"\r\n              src={ConstantList.API_ENPOINT + this.state.user.imagePath}\r\n              onClick={this.handleOpenUploadDialog}\r\n            />\r\n          ) : (\r\n            <div>\r\n              <Avatar\r\n                className=\"avatar mb-20\"\r\n                src={ConstantList.ROOT_PATH + \"assets/images/avatar.jpg\"}\r\n                onClick={this.handleOpenUploadDialog}\r\n              />\r\n            </div>\r\n          )}\r\n          {/* {user.displayName} */}\r\n          {\r\n            <span className=\"title\">\r\n              {\" \"}\r\n              {this.state.displayName != null\r\n                ? this.state.displayName\r\n                : \"\"}{\" \"}\r\n            </span>\r\n          }\r\n        </div>\r\n        {!checkHealthOrg && (\r\n          <ValidatorForm\r\n            ref=\"form\"\r\n            onSubmit={this.handleFormSubmit}\r\n            style={{\r\n              overflowY: \"auto\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n            }}\r\n          >\r\n            <div className=\"m-sm-30\" t={t} i18n={i18n}>\r\n              <Grid className=\"mb-8 mt-8\" container spacing={3}>\r\n                <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                  <TextValidator\r\n                    id=\"standard-basic\"\r\n                    label={\r\n                      <span className=\"font\">\r\n                        <span style={{ color: \"red\" }}> * </span>\r\n                        {t(\"user.firstName\")}\r\n                      </span>\r\n                    }\r\n                    value={\r\n                      this.state.person != null\r\n                        ? this.state.person.firstName\r\n                        : \"\"\r\n                    }\r\n                    onChange={(firstName) =>\r\n                      this.handleChange(firstName, \"firstName\")\r\n                    }\r\n                    size=\"small\"\r\n                    variant=\"outlined\"\r\n                    validators={[\"required\"]}\r\n                    errorMessages={[t(\"general.errorMessages_required\")]}\r\n                    className=\"w-100\"\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item item lg={4} md={4} sm={12} xs={12}>\r\n                  <TextValidator\r\n                    id=\"standard-basic\"\r\n                    label={\r\n                      <span className=\"font\">\r\n                        <span style={{ color: \"red\" }}> * </span>\r\n                        {t(\"user.lastName\")}\r\n                      </span>\r\n                    }\r\n                    size=\"small\"\r\n                    variant=\"outlined\"\r\n                    value={\r\n                      this.state.person != null\r\n                        ? this.state.person.lastName\r\n                        : \"\"\r\n                    }\r\n                    onChange={(lastName) =>\r\n                      this.handleChange(lastName, \"lastName\")\r\n                    }\r\n                    validators={[\"required\"]}\r\n                    errorMessages={[t(\"general.errorMessages_required\")]}\r\n                    className=\"w-100\"\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item item lg={4} md={4} sm={12} xs={12}>\r\n                  <TextValidator\r\n                    id=\"standard-basic\"\r\n                    label={\r\n                      <span className=\"font\">\r\n                        <span style={{ color: \"red\" }}> * </span>\r\n                        {t(\"user.displayName\")}\r\n                      </span>\r\n                    }\r\n                    size=\"small\"\r\n                    variant=\"outlined\"\r\n                    value={\r\n                      this.state.displayName != null\r\n                        ? this.state.displayName\r\n                        : \"\"\r\n                    }\r\n                    validators={[\"required\"]}\r\n                    errorMessages={[t(\"general.errorMessages_required\")]}\r\n                    className=\"w-100\"\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Grid className=\"mb-10\" container spacing={3}>\r\n                <Grid item md={4} sm={12} xs={12}>\r\n            <FormControl fullWidth={true}>\r\n              <TextField id=\"standard-basic\"  label={t('user.email')} value={this.state.email != null ? user.email : ''} \r\n                onChange={this.handleChange}\r\n              />\r\n            </FormControl>\r\n          </Grid>\r\n\r\n                <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                  <TextValidator\r\n                    className=\"w-100\"\r\n                    label={\r\n                      <span className=\"font\">\r\n                        <span style={{ color: \"red\" }}> * </span>\r\n                        {t(\"user.email\")}\r\n                      </span>\r\n                    }\r\n                    size=\"small\"\r\n                    variant=\"outlined\"\r\n                    onChange={this.handleChange}\r\n                    type=\"text\"\r\n                    name=\"email\"\r\n                    value={this.state.email ? this.state.email : \"\"}\r\n                    validators={[\"required\"]}\r\n                    errorMessages={[t(\"general.errorMessages_required\")]}\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                  <TextValidator\r\n                    className=\"w-100\"\r\n                    size=\"small\"\r\n                    variant=\"outlined\"\r\n                    label={<span className=\"font\">{t(\"user.username\")}</span>}\r\n                    onChange={this.handleChange}\r\n                    type=\"text\"\r\n                    name=\"username\"\r\n                    value={this.state.username ? this.state.username : \"\"}\r\n                    validators={[\"required\"]}\r\n                    errorMessages={[t(\"general.errorMessages_required\")]}\r\n                    disabled\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                  <FormControl fullWidth={true} size=\"small\" variant=\"outlined\">\r\n                    <InputLabel htmlFor=\"gender-simple\">\r\n                      {<span className=\"font\">{t(\"user.gender\")}</span>}\r\n                    </InputLabel>\r\n                    <Select\r\n                      value={this.state.person ? this.state.person.gender : \"\"}\r\n                      onChange={(gender) => this.handleChange(gender, \"gender\")}\r\n                      inputProps={{\r\n                        name: \"gender\",\r\n                        id: \"gender-simple\",\r\n                      }}\r\n                    >\r\n                      {genders.map((item) => {\r\n                        return (\r\n                          <MenuItem key={item.id} value={item.id}>\r\n                            {item.name}\r\n                          </MenuItem>\r\n                        );\r\n                      })}\r\n                    </Select>\r\n                  </FormControl>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Grid className=\"mb-10\" style={{ textAlign: \"right\" }}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  type=\"submit\"\r\n                  className=\"mr-16\"\r\n                >\r\n                  {t(\"general.update\")}\r\n                </Button>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  type=\"button\"\r\n                  onClick={() => this.openPasswordDialog()}\r\n                >\r\n                  {t(\"user.changePass\")}\r\n                </Button>\r\n              </Grid>\r\n            </div>\r\n          </ValidatorForm>\r\n        )}\r\n        {checkHealthOrg && (\r\n          <div>\r\n            <ValidatorForm ref=\"form\" onSubmit={this.handleFormSubmitAdmin}>\r\n              <Grid className=\"\" container spacing={2}>\r\n                <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                  <TextValidator\r\n                    className=\"w-100 \"\r\n                    label={\r\n                      <span className=\"font\">\r\n                        <span style={{ color: \"red\" }}> * </span>\r\n                        {t(\"EQAHealthOrg.Name\")}\r\n                      </span>\r\n                    }\r\n                    onChange={this.handleChange}\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    value={name}\r\n                    validators={[\"required\"]}\r\n                    errorMessages={[t(\"general.errorMessages_required\")]}\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                  />\r\n                </Grid>\r\n                <Grid item lg={4} md={4} sm={6} xs={12}>\r\n                  <TextValidator\r\n                    className=\"w-100 \"\r\n                    label={\r\n                      <span className=\"font\">{t(\"EQAHealthOrg.Code\")}</span>\r\n                    }\r\n                    onChange={this.handleChange}\r\n                    disabled={!isManualSetCode}\r\n                    type=\"text\"\r\n                    name=\"code\"\r\n                    value={code}\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                  />\r\n                </Grid>\r\n                <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                  <TextValidator\r\n                    className=\"w-100 \"\r\n                    label={\r\n                      <span className=\"font\">\r\n                        <span style={{ color: \"red\" }}> * </span>\r\n                        {t(\"EQAHealthOrg.Address\")}\r\n                      </span>\r\n                    }\r\n                    onChange={this.handleChange}\r\n                    type=\"text\"\r\n                    name=\"address\"\r\n                    value={address}\r\n                    validators={[\"required\"]}\r\n                    errorMessages={[t(\"general.errorMessages_required\")]}\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                  <TextValidator\r\n                    className=\"w-100 \"\r\n                    label={\r\n                      <span className=\"font\">\r\n                        {t(\"EQAHealthOrg.contactPhone\")}\r\n                      </span>\r\n                    }\r\n                    onChange={this.handleChange}\r\n                    type=\"number\"\r\n                    name=\"contactPhone\"\r\n                    value={contactPhone ? contactPhone : \"\"}\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    validators={[ \"matchRegexp:^[0-9]*$\", \"isLengthNumber\"]}\r\n                    errorMessages={[ t(\"general.errorMessages_phone_number_invalid\"),\r\n                    t(\"general.errorMessages_phone_number_invalid\")]}\r\n                  />\r\n                </Grid>\r\n                <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                  <TextValidator\r\n                    className=\"w-100 \"\r\n                    label={\r\n                      <span className=\"font\">\r\n                        <span style={{ color: \"red\" }}> * </span>\r\n                        {t(\"EQAHealthOrg.email\")}\r\n                      </span>\r\n                    }\r\n                    onChange={this.handleChange}\r\n                    type=\"text\"\r\n                    name=\"email\"\r\n                    value={email ? email : \"\"}\r\n                    validators={[\"required\", \"isEmail\"]}\r\n                    errorMessages={[\r\n                      t(\"general.errorMessages_required\"),\r\n                      t(\"general.errorMessages_email_valid\"),\r\n                    ]}\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                  />\r\n                </Grid>\r\n                <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                  <TextValidator\r\n                    className=\"w-100 \"\r\n                    label={\r\n                      <span className=\"font\">\r\n                        {t(\"EQAHealthOrg.ContactName\")}\r\n                      </span>\r\n                    }\r\n                    onChange={this.handleChange}\r\n                    type=\"text\"\r\n                    name=\"contactName\"\r\n                    value={contactName ? contactName : \"\"}\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    validators={[\"required\"]}\r\n                    errorMessages={[t(\"general.errorMessages_required\")]}\r\n                  />\r\n                </Grid>\r\n                <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                  <FormControlLabel\r\n                    disabled\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    label={\r\n                      <span style={{ fontSize: \"115%\" }} className=\"font\">\r\n                        {t(\"EQAHealthOrg.positiveAffirmativeRight\")}\r\n                      </span>\r\n                    }\r\n                    control={\r\n                      <Checkbox\r\n                        checked={positiveAffirmativeRight}\r\n                        onChange={\r\n                          (positiveAffirmativeRight) =>\r\n                            this.handleChange(\r\n                              positiveAffirmativeRight,\r\n                              \"positiveAffirmativeRight\"\r\n                            )\r\n                          // this.handleChange(isFinalResult, 'isFinalResult')\r\n                        }\r\n                      />\r\n                    }\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n              <Grid className=\"flex flex-end flex-middle\" container spacing={4}>\r\n                <Button variant=\"contained\" color=\"primary\" type=\"submit\" className=\"mr-16\">\r\n                  {t(\"update\")}\r\n                </Button>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  type=\"button\"\r\n                  onClick={() => this.openPasswordDialog()}\r\n                >\r\n                  {t(\"user.changePass\")}\r\n                </Button>\r\n              </Grid>\r\n            </ValidatorForm>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles({}, { withTheme: true })(UserProfile);\r\n"]},"metadata":{},"sourceType":"module"}