{"ast":null,"code":"/**\r\n * Sub-pixel optimize for canvas rendering, prevent from blur\r\n * when rendering a thin vertical/horizontal line.\r\n */\nvar round = Math.round;\n/**\r\n * Sub pixel optimize line for canvas\r\n *\r\n * @param {Object} outputShape The modification will be performed on `outputShape`.\r\n *                 `outputShape` and `inputShape` can be the same object.\r\n *                 `outputShape` object can be used repeatly, because all of\r\n *                 the `x1`, `x2`, `y1`, `y2` will be assigned in this method.\r\n * @param {Object} [inputShape]\r\n * @param {number} [inputShape.x1]\r\n * @param {number} [inputShape.y1]\r\n * @param {number} [inputShape.x2]\r\n * @param {number} [inputShape.y2]\r\n * @param {Object} [style]\r\n * @param {number} [style.lineWidth] If `null`/`undefined`/`0`, do not optimize.\r\n */\n\nfunction subPixelOptimizeLine(outputShape, inputShape, style) {\n  if (!inputShape) {\n    return;\n  }\n\n  var x1 = inputShape.x1;\n  var x2 = inputShape.x2;\n  var y1 = inputShape.y1;\n  var y2 = inputShape.y2;\n  outputShape.x1 = x1;\n  outputShape.x2 = x2;\n  outputShape.y1 = y1;\n  outputShape.y2 = y2;\n  var lineWidth = style && style.lineWidth;\n\n  if (!lineWidth) {\n    return;\n  }\n\n  if (round(x1 * 2) === round(x2 * 2)) {\n    outputShape.x1 = outputShape.x2 = subPixelOptimize(x1, lineWidth, true);\n  }\n\n  if (round(y1 * 2) === round(y2 * 2)) {\n    outputShape.y1 = outputShape.y2 = subPixelOptimize(y1, lineWidth, true);\n  }\n}\n/**\r\n * Sub pixel optimize rect for canvas\r\n *\r\n * @param {Object} outputShape The modification will be performed on `outputShape`.\r\n *                 `outputShape` and `inputShape` can be the same object.\r\n *                 `outputShape` object can be used repeatly, because all of\r\n *                 the `x`, `y`, `width`, `height` will be assigned in this method.\r\n * @param {Object} [inputShape]\r\n * @param {number} [inputShape.x]\r\n * @param {number} [inputShape.y]\r\n * @param {number} [inputShape.width]\r\n * @param {number} [inputShape.height]\r\n * @param {Object} [style]\r\n * @param {number} [style.lineWidth] If `null`/`undefined`/`0`, do not optimize.\r\n */\n\n\nfunction subPixelOptimizeRect(outputShape, inputShape, style) {\n  if (!inputShape) {\n    return;\n  }\n\n  var originX = inputShape.x;\n  var originY = inputShape.y;\n  var originWidth = inputShape.width;\n  var originHeight = inputShape.height;\n  outputShape.x = originX;\n  outputShape.y = originY;\n  outputShape.width = originWidth;\n  outputShape.height = originHeight;\n  var lineWidth = style && style.lineWidth;\n\n  if (!lineWidth) {\n    return;\n  }\n\n  outputShape.x = subPixelOptimize(originX, lineWidth, true);\n  outputShape.y = subPixelOptimize(originY, lineWidth, true);\n  outputShape.width = Math.max(subPixelOptimize(originX + originWidth, lineWidth, false) - outputShape.x, originWidth === 0 ? 0 : 1);\n  outputShape.height = Math.max(subPixelOptimize(originY + originHeight, lineWidth, false) - outputShape.y, originHeight === 0 ? 0 : 1);\n}\n/**\r\n * Sub pixel optimize for canvas\r\n *\r\n * @param {number} position Coordinate, such as x, y\r\n * @param {number} lineWidth If `null`/`undefined`/`0`, do not optimize.\r\n * @param {boolean=} positiveOrNegative Default false (negative).\r\n * @return {number} Optimized position.\r\n */\n\n\nfunction subPixelOptimize(position, lineWidth, positiveOrNegative) {\n  if (!lineWidth) {\n    return position;\n  } // Assure that (position + lineWidth / 2) is near integer edge,\n  // otherwise line will be fuzzy in canvas.\n\n\n  var doubledPosition = round(position * 2);\n  return (doubledPosition + round(lineWidth)) % 2 === 0 ? doubledPosition / 2 : (doubledPosition + (positiveOrNegative ? 1 : -1)) / 2;\n}\n\nexports.subPixelOptimizeLine = subPixelOptimizeLine;\nexports.subPixelOptimizeRect = subPixelOptimizeRect;\nexports.subPixelOptimize = subPixelOptimize;","map":null,"metadata":{},"sourceType":"script"}