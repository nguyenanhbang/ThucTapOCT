{"ast":null,"code":"/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar linkList = require(\"./helper/linkList\");\n\nvar List = require(\"./List\");\n\nvar createDimensions = require(\"./helper/createDimensions\");\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n\n/**\r\n * Tree data structure\r\n *\r\n * @module echarts/data/Tree\r\n */\n\n/**\r\n * @constructor module:echarts/data/Tree~TreeNode\r\n * @param {string} name\r\n * @param {module:echarts/data/Tree} hostTree\r\n */\n\n\nvar TreeNode = function TreeNode(name, hostTree) {\n  /**\r\n   * @type {string}\r\n   */\n  this.name = name || '';\n  /**\r\n   * Depth of node\r\n   *\r\n   * @type {number}\r\n   * @readOnly\r\n   */\n\n  this.depth = 0;\n  /**\r\n   * Height of the subtree rooted at this node.\r\n   * @type {number}\r\n   * @readOnly\r\n   */\n\n  this.height = 0;\n  /**\r\n   * @type {module:echarts/data/Tree~TreeNode}\r\n   * @readOnly\r\n   */\n\n  this.parentNode = null;\n  /**\r\n   * Reference to list item.\r\n   * Do not persistent dataIndex outside,\r\n   * besause it may be changed by list.\r\n   * If dataIndex -1,\r\n   * this node is logical deleted (filtered) in list.\r\n   *\r\n   * @type {Object}\r\n   * @readOnly\r\n   */\n\n  this.dataIndex = -1;\n  /**\r\n   * @type {Array.<module:echarts/data/Tree~TreeNode>}\r\n   * @readOnly\r\n   */\n\n  this.children = [];\n  /**\r\n   * @type {Array.<module:echarts/data/Tree~TreeNode>}\r\n   * @pubilc\r\n   */\n\n  this.viewChildren = [];\n  /**\r\n   * @type {moduel:echarts/data/Tree}\r\n   * @readOnly\r\n   */\n\n  this.hostTree = hostTree;\n};\n\nTreeNode.prototype = {\n  constructor: TreeNode,\n\n  /**\r\n   * The node is removed.\r\n   * @return {boolean} is removed.\r\n   */\n  isRemoved: function isRemoved() {\n    return this.dataIndex < 0;\n  },\n\n  /**\r\n   * Travel this subtree (include this node).\r\n   * Usage:\r\n   *    node.eachNode(function () { ... }); // preorder\r\n   *    node.eachNode('preorder', function () { ... }); // preorder\r\n   *    node.eachNode('postorder', function () { ... }); // postorder\r\n   *    node.eachNode(\r\n   *        {order: 'postorder', attr: 'viewChildren'},\r\n   *        function () { ... }\r\n   *    ); // postorder\r\n   *\r\n   * @param {(Object|string)} options If string, means order.\r\n   * @param {string=} options.order 'preorder' or 'postorder'\r\n   * @param {string=} options.attr 'children' or 'viewChildren'\r\n   * @param {Function} cb If in preorder and return false,\r\n   *                      its subtree will not be visited.\r\n   * @param {Object} [context]\r\n   */\n  eachNode: function eachNode(options, cb, context) {\n    if (typeof options === 'function') {\n      context = cb;\n      cb = options;\n      options = null;\n    }\n\n    options = options || {};\n\n    if (zrUtil.isString(options)) {\n      options = {\n        order: options\n      };\n    }\n\n    var order = options.order || 'preorder';\n    var children = this[options.attr || 'children'];\n    var suppressVisitSub;\n    order === 'preorder' && (suppressVisitSub = cb.call(context, this));\n\n    for (var i = 0; !suppressVisitSub && i < children.length; i++) {\n      children[i].eachNode(options, cb, context);\n    }\n\n    order === 'postorder' && cb.call(context, this);\n  },\n\n  /**\r\n   * Update depth and height of this subtree.\r\n   *\r\n   * @param  {number} depth\r\n   */\n  updateDepthAndHeight: function updateDepthAndHeight(depth) {\n    var height = 0;\n    this.depth = depth;\n\n    for (var i = 0; i < this.children.length; i++) {\n      var child = this.children[i];\n      child.updateDepthAndHeight(depth + 1);\n\n      if (child.height > height) {\n        height = child.height;\n      }\n    }\n\n    this.height = height + 1;\n  },\n\n  /**\r\n   * @param  {string} id\r\n   * @return {module:echarts/data/Tree~TreeNode}\r\n   */\n  getNodeById: function getNodeById(id) {\n    if (this.getId() === id) {\n      return this;\n    }\n\n    for (var i = 0, children = this.children, len = children.length; i < len; i++) {\n      var res = children[i].getNodeById(id);\n\n      if (res) {\n        return res;\n      }\n    }\n  },\n\n  /**\r\n   * @param {module:echarts/data/Tree~TreeNode} node\r\n   * @return {boolean}\r\n   */\n  contains: function contains(node) {\n    if (node === this) {\n      return true;\n    }\n\n    for (var i = 0, children = this.children, len = children.length; i < len; i++) {\n      var res = children[i].contains(node);\n\n      if (res) {\n        return res;\n      }\n    }\n  },\n\n  /**\r\n   * @param {boolean} includeSelf Default false.\r\n   * @return {Array.<module:echarts/data/Tree~TreeNode>} order: [root, child, grandchild, ...]\r\n   */\n  getAncestors: function getAncestors(includeSelf) {\n    var ancestors = [];\n    var node = includeSelf ? this : this.parentNode;\n\n    while (node) {\n      ancestors.push(node);\n      node = node.parentNode;\n    }\n\n    ancestors.reverse();\n    return ancestors;\n  },\n\n  /**\r\n   * @param {string|Array=} [dimension='value'] Default 'value'. can be 0, 1, 2, 3\r\n   * @return {number} Value.\r\n   */\n  getValue: function getValue(dimension) {\n    var data = this.hostTree.data;\n    return data.get(data.getDimension(dimension || 'value'), this.dataIndex);\n  },\n\n  /**\r\n   * @param {Object} layout\r\n   * @param {boolean=} [merge=false]\r\n   */\n  setLayout: function setLayout(layout, merge) {\n    this.dataIndex >= 0 && this.hostTree.data.setItemLayout(this.dataIndex, layout, merge);\n  },\n\n  /**\r\n   * @return {Object} layout\r\n   */\n  getLayout: function getLayout() {\n    return this.hostTree.data.getItemLayout(this.dataIndex);\n  },\n\n  /**\r\n   * @param {string} [path]\r\n   * @return {module:echarts/model/Model}\r\n   */\n  getModel: function getModel(path) {\n    if (this.dataIndex < 0) {\n      return;\n    }\n\n    var hostTree = this.hostTree;\n    var itemModel = hostTree.data.getItemModel(this.dataIndex);\n    return itemModel.getModel(path);\n  },\n\n  /**\r\n   * @example\r\n   *  setItemVisual('color', color);\r\n   *  setItemVisual({\r\n   *      'color': color\r\n   *  });\r\n   */\n  setVisual: function setVisual(key, value) {\n    this.dataIndex >= 0 && this.hostTree.data.setItemVisual(this.dataIndex, key, value);\n  },\n\n  /**\r\n   * Get item visual\r\n   */\n  getVisual: function getVisual(key, ignoreParent) {\n    return this.hostTree.data.getItemVisual(this.dataIndex, key, ignoreParent);\n  },\n\n  /**\r\n   * @public\r\n   * @return {number}\r\n   */\n  getRawIndex: function getRawIndex() {\n    return this.hostTree.data.getRawIndex(this.dataIndex);\n  },\n\n  /**\r\n   * @public\r\n   * @return {string}\r\n   */\n  getId: function getId() {\n    return this.hostTree.data.getId(this.dataIndex);\n  },\n\n  /**\r\n   * if this is an ancestor of another node\r\n   *\r\n   * @public\r\n   * @param {TreeNode} node another node\r\n   * @return {boolean} if is ancestor\r\n   */\n  isAncestorOf: function isAncestorOf(node) {\n    var parent = node.parentNode;\n\n    while (parent) {\n      if (parent === this) {\n        return true;\n      }\n\n      parent = parent.parentNode;\n    }\n\n    return false;\n  },\n\n  /**\r\n   * if this is an descendant of another node\r\n   *\r\n   * @public\r\n   * @param {TreeNode} node another node\r\n   * @return {boolean} if is descendant\r\n   */\n  isDescendantOf: function isDescendantOf(node) {\n    return node !== this && node.isAncestorOf(this);\n  }\n};\n/**\r\n * @constructor\r\n * @alias module:echarts/data/Tree\r\n * @param {module:echarts/model/Model} hostModel\r\n */\n\nfunction Tree(hostModel) {\n  /**\r\n   * @type {module:echarts/data/Tree~TreeNode}\r\n   * @readOnly\r\n   */\n  this.root;\n  /**\r\n   * @type {module:echarts/data/List}\r\n   * @readOnly\r\n   */\n\n  this.data;\n  /**\r\n   * Index of each item is the same as the raw index of coresponding list item.\r\n   * @private\r\n   * @type {Array.<module:echarts/data/Tree~TreeNode}\r\n   */\n\n  this._nodes = [];\n  /**\r\n   * @private\r\n   * @readOnly\r\n   * @type {module:echarts/model/Model}\r\n   */\n\n  this.hostModel = hostModel;\n}\n\nTree.prototype = {\n  constructor: Tree,\n  type: 'tree',\n\n  /**\r\n   * Travel this subtree (include this node).\r\n   * Usage:\r\n   *    node.eachNode(function () { ... }); // preorder\r\n   *    node.eachNode('preorder', function () { ... }); // preorder\r\n   *    node.eachNode('postorder', function () { ... }); // postorder\r\n   *    node.eachNode(\r\n   *        {order: 'postorder', attr: 'viewChildren'},\r\n   *        function () { ... }\r\n   *    ); // postorder\r\n   *\r\n   * @param {(Object|string)} options If string, means order.\r\n   * @param {string=} options.order 'preorder' or 'postorder'\r\n   * @param {string=} options.attr 'children' or 'viewChildren'\r\n   * @param {Function} cb\r\n   * @param {Object}   [context]\r\n   */\n  eachNode: function eachNode(options, cb, context) {\n    this.root.eachNode(options, cb, context);\n  },\n\n  /**\r\n   * @param {number} dataIndex\r\n   * @return {module:echarts/data/Tree~TreeNode}\r\n   */\n  getNodeByDataIndex: function getNodeByDataIndex(dataIndex) {\n    var rawIndex = this.data.getRawIndex(dataIndex);\n    return this._nodes[rawIndex];\n  },\n\n  /**\r\n   * @param {string} name\r\n   * @return {module:echarts/data/Tree~TreeNode}\r\n   */\n  getNodeByName: function getNodeByName(name) {\n    return this.root.getNodeByName(name);\n  },\n\n  /**\r\n   * Update item available by list,\r\n   * when list has been performed options like 'filterSelf' or 'map'.\r\n   */\n  update: function update() {\n    var data = this.data;\n    var nodes = this._nodes;\n\n    for (var i = 0, len = nodes.length; i < len; i++) {\n      nodes[i].dataIndex = -1;\n    }\n\n    for (var i = 0, len = data.count(); i < len; i++) {\n      nodes[data.getRawIndex(i)].dataIndex = i;\n    }\n  },\n\n  /**\r\n   * Clear all layouts\r\n   */\n  clearLayouts: function clearLayouts() {\n    this.data.clearItemLayouts();\n  }\n};\n/**\r\n * data node format:\r\n * {\r\n *     name: ...\r\n *     value: ...\r\n *     children: [\r\n *         {\r\n *             name: ...\r\n *             value: ...\r\n *             children: ...\r\n *         },\r\n *         ...\r\n *     ]\r\n * }\r\n *\r\n * @static\r\n * @param {Object} dataRoot Root node.\r\n * @param {module:echarts/model/Model} hostModel\r\n * @return module:echarts/data/Tree\r\n */\n\nTree.createTree = function (dataRoot, hostModel, beforeLink) {\n  var tree = new Tree(hostModel);\n  var listData = [];\n  var dimMax = 1;\n  buildHierarchy(dataRoot);\n\n  function buildHierarchy(dataNode, parentNode) {\n    var value = dataNode.value;\n    dimMax = Math.max(dimMax, zrUtil.isArray(value) ? value.length : 1);\n    listData.push(dataNode);\n    var node = new TreeNode(dataNode.name, tree);\n    parentNode ? addChild(node, parentNode) : tree.root = node;\n\n    tree._nodes.push(node);\n\n    var children = dataNode.children;\n\n    if (children) {\n      for (var i = 0; i < children.length; i++) {\n        buildHierarchy(children[i], node);\n      }\n    }\n  }\n\n  tree.root.updateDepthAndHeight(0);\n  var dimensionsInfo = createDimensions(listData, {\n    coordDimensions: ['value'],\n    dimensionsCount: dimMax\n  });\n  var list = new List(dimensionsInfo, hostModel);\n  list.initData(listData);\n  beforeLink && beforeLink(list);\n  linkList({\n    mainData: list,\n    struct: tree,\n    structAttr: 'tree'\n  });\n  tree.update();\n  return tree;\n};\n/**\r\n * It is needed to consider the mess of 'list', 'hostModel' when creating a TreeNote,\r\n * so this function is not ready and not necessary to be public.\r\n *\r\n * @param {(module:echarts/data/Tree~TreeNode|Object)} child\r\n */\n\n\nfunction addChild(child, node) {\n  var children = node.children;\n\n  if (child.parentNode === node) {\n    return;\n  }\n\n  children.push(child);\n  child.parentNode = node;\n}\n\nvar _default = Tree;\nmodule.exports = _default;","map":null,"metadata":{},"sourceType":"script"}