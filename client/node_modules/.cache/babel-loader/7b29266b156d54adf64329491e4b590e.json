{"ast":null,"code":"/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar BoundingRect = require(\"zrender/lib/core/BoundingRect\");\n\nvar View = require(\"../View\");\n\nvar geoSourceManager = require(\"./geoSourceManager\");\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n\n/**\r\n * [Geo description]\r\n * For backward compatibility, the orginal interface:\r\n * `name, map, geoJson, specialAreas, nameMap` is kept.\r\n *\r\n * @param {string|Object} name\r\n * @param {string} map Map type\r\n *        Specify the positioned areas by left, top, width, height\r\n * @param {Object.<string, string>} [nameMap]\r\n *        Specify name alias\r\n * @param {boolean} [invertLongitute=true]\r\n */\n\n\nfunction Geo(name, map, nameMap, invertLongitute) {\n  View.call(this, name);\n  /**\r\n   * Map type\r\n   * @type {string}\r\n   */\n\n  this.map = map;\n  var source = geoSourceManager.load(map, nameMap);\n  this._nameCoordMap = source.nameCoordMap;\n  this._regionsMap = source.regionsMap;\n  this._invertLongitute = invertLongitute == null ? true : invertLongitute;\n  /**\r\n   * @readOnly\r\n   */\n\n  this.regions = source.regions;\n  /**\r\n   * @type {module:zrender/src/core/BoundingRect}\r\n   */\n\n  this._rect = source.boundingRect;\n}\n\nGeo.prototype = {\n  constructor: Geo,\n  type: 'geo',\n\n  /**\r\n   * @param {Array.<string>}\r\n   * @readOnly\r\n   */\n  dimensions: ['lng', 'lat'],\n\n  /**\r\n   * If contain given lng,lat coord\r\n   * @param {Array.<number>}\r\n   * @readOnly\r\n   */\n  containCoord: function containCoord(coord) {\n    var regions = this.regions;\n\n    for (var i = 0; i < regions.length; i++) {\n      if (regions[i].contain(coord)) {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\r\n   * @override\r\n   */\n  transformTo: function transformTo(x, y, width, height) {\n    var rect = this.getBoundingRect();\n    var invertLongitute = this._invertLongitute;\n    rect = rect.clone();\n\n    if (invertLongitute) {\n      // Longitute is inverted\n      rect.y = -rect.y - rect.height;\n    }\n\n    var rawTransformable = this._rawTransformable;\n    rawTransformable.transform = rect.calculateTransform(new BoundingRect(x, y, width, height));\n    rawTransformable.decomposeTransform();\n\n    if (invertLongitute) {\n      var scale = rawTransformable.scale;\n      scale[1] = -scale[1];\n    }\n\n    rawTransformable.updateTransform();\n\n    this._updateTransform();\n  },\n\n  /**\r\n   * @param {string} name\r\n   * @return {module:echarts/coord/geo/Region}\r\n   */\n  getRegion: function getRegion(name) {\n    return this._regionsMap.get(name);\n  },\n  getRegionByCoord: function getRegionByCoord(coord) {\n    var regions = this.regions;\n\n    for (var i = 0; i < regions.length; i++) {\n      if (regions[i].contain(coord)) {\n        return regions[i];\n      }\n    }\n  },\n\n  /**\r\n   * Add geoCoord for indexing by name\r\n   * @param {string} name\r\n   * @param {Array.<number>} geoCoord\r\n   */\n  addGeoCoord: function addGeoCoord(name, geoCoord) {\n    this._nameCoordMap.set(name, geoCoord);\n  },\n\n  /**\r\n   * Get geoCoord by name\r\n   * @param {string} name\r\n   * @return {Array.<number>}\r\n   */\n  getGeoCoord: function getGeoCoord(name) {\n    return this._nameCoordMap.get(name);\n  },\n\n  /**\r\n   * @override\r\n   */\n  getBoundingRect: function getBoundingRect() {\n    return this._rect;\n  },\n\n  /**\r\n   * @param {string|Array.<number>} data\r\n   * @param {boolean} noRoam\r\n   * @param {Array.<number>} [out]\r\n   * @return {Array.<number>}\r\n   */\n  dataToPoint: function dataToPoint(data, noRoam, out) {\n    if (typeof data === 'string') {\n      // Map area name to geoCoord\n      data = this.getGeoCoord(data);\n    }\n\n    if (data) {\n      return View.prototype.dataToPoint.call(this, data, noRoam, out);\n    }\n  },\n\n  /**\r\n   * @override\r\n   */\n  convertToPixel: zrUtil.curry(doConvert, 'dataToPoint'),\n\n  /**\r\n   * @override\r\n   */\n  convertFromPixel: zrUtil.curry(doConvert, 'pointToData')\n};\nzrUtil.mixin(Geo, View);\n\nfunction doConvert(methodName, ecModel, finder, value) {\n  var geoModel = finder.geoModel;\n  var seriesModel = finder.seriesModel;\n  var coordSys = geoModel ? geoModel.coordinateSystem : seriesModel ? seriesModel.coordinateSystem // For map.\n  || (seriesModel.getReferringComponents('geo')[0] || {}).coordinateSystem : null;\n  return coordSys === this ? coordSys[methodName](value) : null;\n}\n\nvar _default = Geo;\nmodule.exports = _default;","map":null,"metadata":{},"sourceType":"script"}