{"ast":null,"code":"/**\r\n * Event Mixin\r\n * @module zrender/mixin/Eventful\r\n * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\r\n *         pissang (https://www.github.com/pissang)\r\n */\nvar arrySlice = Array.prototype.slice;\n/**\r\n * Event dispatcher.\r\n *\r\n * @alias module:zrender/mixin/Eventful\r\n * @constructor\r\n * @param {Object} [eventProcessor] The object eventProcessor is the scope when\r\n *        `eventProcessor.xxx` called.\r\n * @param {Function} [eventProcessor.normalizeQuery]\r\n *        param: {string|Object} Raw query.\r\n *        return: {string|Object} Normalized query.\r\n * @param {Function} [eventProcessor.filter] Event will be dispatched only\r\n *        if it returns `true`.\r\n *        param: {string} eventType\r\n *        param: {string|Object} query\r\n *        return: {boolean}\r\n * @param {Function} [eventProcessor.afterTrigger] Called after all handlers called.\r\n *        param: {string} eventType\r\n */\n\nvar Eventful = function Eventful(eventProcessor) {\n  this._$handlers = {};\n  this._$eventProcessor = eventProcessor;\n};\n\nEventful.prototype = {\n  constructor: Eventful,\n\n  /**\r\n   * The handler can only be triggered once, then removed.\r\n   *\r\n   * @param {string} event The event name.\r\n   * @param {string|Object} [query] Condition used on event filter.\r\n   * @param {Function} handler The event handler.\r\n   * @param {Object} context\r\n   */\n  one: function one(event, query, handler, context) {\n    return _on(this, event, query, handler, context, true);\n  },\n\n  /**\r\n   * Bind a handler.\r\n   *\r\n   * @param {string} event The event name.\r\n   * @param {string|Object} [query] Condition used on event filter.\r\n   * @param {Function} handler The event handler.\r\n   * @param {Object} [context]\r\n   */\n  on: function on(event, query, handler, context) {\n    return _on(this, event, query, handler, context, false);\n  },\n\n  /**\r\n   * Whether any handler has bound.\r\n   *\r\n   * @param  {string}  event\r\n   * @return {boolean}\r\n   */\n  isSilent: function isSilent(event) {\n    var _h = this._$handlers;\n    return !_h[event] || !_h[event].length;\n  },\n\n  /**\r\n   * Unbind a event.\r\n   *\r\n   * @param {string} [event] The event name.\r\n   *        If no `event` input, \"off\" all listeners.\r\n   * @param {Function} [handler] The event handler.\r\n   *        If no `handler` input, \"off\" all listeners of the `event`.\r\n   */\n  off: function off(event, handler) {\n    var _h = this._$handlers;\n\n    if (!event) {\n      this._$handlers = {};\n      return this;\n    }\n\n    if (handler) {\n      if (_h[event]) {\n        var newList = [];\n\n        for (var i = 0, l = _h[event].length; i < l; i++) {\n          if (_h[event][i].h !== handler) {\n            newList.push(_h[event][i]);\n          }\n        }\n\n        _h[event] = newList;\n      }\n\n      if (_h[event] && _h[event].length === 0) {\n        delete _h[event];\n      }\n    } else {\n      delete _h[event];\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Dispatch a event.\r\n   *\r\n   * @param {string} type The event name.\r\n   */\n  trigger: function trigger(type) {\n    var _h = this._$handlers[type];\n    var eventProcessor = this._$eventProcessor;\n\n    if (_h) {\n      var args = arguments;\n      var argLen = args.length;\n\n      if (argLen > 3) {\n        args = arrySlice.call(args, 1);\n      }\n\n      var len = _h.length;\n\n      for (var i = 0; i < len;) {\n        var hItem = _h[i];\n\n        if (eventProcessor && eventProcessor.filter && hItem.query != null && !eventProcessor.filter(type, hItem.query)) {\n          i++;\n          continue;\n        } // Optimize advise from backbone\n\n\n        switch (argLen) {\n          case 1:\n            hItem.h.call(hItem.ctx);\n            break;\n\n          case 2:\n            hItem.h.call(hItem.ctx, args[1]);\n            break;\n\n          case 3:\n            hItem.h.call(hItem.ctx, args[1], args[2]);\n            break;\n\n          default:\n            // have more than 2 given arguments\n            hItem.h.apply(hItem.ctx, args);\n            break;\n        }\n\n        if (hItem.one) {\n          _h.splice(i, 1);\n\n          len--;\n        } else {\n          i++;\n        }\n      }\n    }\n\n    eventProcessor && eventProcessor.afterTrigger && eventProcessor.afterTrigger(type);\n    return this;\n  },\n\n  /**\r\n   * Dispatch a event with context, which is specified at the last parameter.\r\n   *\r\n   * @param {string} type The event name.\r\n   */\n  triggerWithContext: function triggerWithContext(type) {\n    var _h = this._$handlers[type];\n    var eventProcessor = this._$eventProcessor;\n\n    if (_h) {\n      var args = arguments;\n      var argLen = args.length;\n\n      if (argLen > 4) {\n        args = arrySlice.call(args, 1, args.length - 1);\n      }\n\n      var ctx = args[args.length - 1];\n      var len = _h.length;\n\n      for (var i = 0; i < len;) {\n        var hItem = _h[i];\n\n        if (eventProcessor && eventProcessor.filter && hItem.query != null && !eventProcessor.filter(type, hItem.query)) {\n          i++;\n          continue;\n        } // Optimize advise from backbone\n\n\n        switch (argLen) {\n          case 1:\n            hItem.h.call(ctx);\n            break;\n\n          case 2:\n            hItem.h.call(ctx, args[1]);\n            break;\n\n          case 3:\n            hItem.h.call(ctx, args[1], args[2]);\n            break;\n\n          default:\n            // have more than 2 given arguments\n            hItem.h.apply(ctx, args);\n            break;\n        }\n\n        if (hItem.one) {\n          _h.splice(i, 1);\n\n          len--;\n        } else {\n          i++;\n        }\n      }\n    }\n\n    eventProcessor && eventProcessor.afterTrigger && eventProcessor.afterTrigger(type);\n    return this;\n  }\n};\n\nfunction normalizeQuery(host, query) {\n  var eventProcessor = host._$eventProcessor;\n\n  if (query != null && eventProcessor && eventProcessor.normalizeQuery) {\n    query = eventProcessor.normalizeQuery(query);\n  }\n\n  return query;\n}\n\nfunction _on(eventful, event, query, handler, context, isOnce) {\n  var _h = eventful._$handlers;\n\n  if (typeof query === 'function') {\n    context = handler;\n    handler = query;\n    query = null;\n  }\n\n  if (!handler || !event) {\n    return eventful;\n  }\n\n  query = normalizeQuery(eventful, query);\n\n  if (!_h[event]) {\n    _h[event] = [];\n  }\n\n  for (var i = 0; i < _h[event].length; i++) {\n    if (_h[event][i].h === handler) {\n      return eventful;\n    }\n  }\n\n  var wrap = {\n    h: handler,\n    one: isOnce,\n    query: query,\n    ctx: context || eventful,\n    // FIXME\n    // Do not publish this feature util it is proved that it makes sense.\n    callAtLast: handler.zrEventfulCallAtLast\n  };\n  var lastIndex = _h[event].length - 1;\n  var lastWrap = _h[event][lastIndex];\n  lastWrap && lastWrap.callAtLast ? _h[event].splice(lastIndex, 0, wrap) : _h[event].push(wrap);\n  return eventful;\n} // ----------------------\n// The events in zrender\n// ----------------------\n\n/**\r\n * @event module:zrender/mixin/Eventful#onclick\r\n * @type {Function}\r\n * @default null\r\n */\n\n/**\r\n * @event module:zrender/mixin/Eventful#onmouseover\r\n * @type {Function}\r\n * @default null\r\n */\n\n/**\r\n * @event module:zrender/mixin/Eventful#onmouseout\r\n * @type {Function}\r\n * @default null\r\n */\n\n/**\r\n * @event module:zrender/mixin/Eventful#onmousemove\r\n * @type {Function}\r\n * @default null\r\n */\n\n/**\r\n * @event module:zrender/mixin/Eventful#onmousewheel\r\n * @type {Function}\r\n * @default null\r\n */\n\n/**\r\n * @event module:zrender/mixin/Eventful#onmousedown\r\n * @type {Function}\r\n * @default null\r\n */\n\n/**\r\n * @event module:zrender/mixin/Eventful#onmouseup\r\n * @type {Function}\r\n * @default null\r\n */\n\n/**\r\n * @event module:zrender/mixin/Eventful#ondrag\r\n * @type {Function}\r\n * @default null\r\n */\n\n/**\r\n * @event module:zrender/mixin/Eventful#ondragstart\r\n * @type {Function}\r\n * @default null\r\n */\n\n/**\r\n * @event module:zrender/mixin/Eventful#ondragend\r\n * @type {Function}\r\n * @default null\r\n */\n\n/**\r\n * @event module:zrender/mixin/Eventful#ondragenter\r\n * @type {Function}\r\n * @default null\r\n */\n\n/**\r\n * @event module:zrender/mixin/Eventful#ondragleave\r\n * @type {Function}\r\n * @default null\r\n */\n\n/**\r\n * @event module:zrender/mixin/Eventful#ondragover\r\n * @type {Function}\r\n * @default null\r\n */\n\n/**\r\n * @event module:zrender/mixin/Eventful#ondrop\r\n * @type {Function}\r\n * @default null\r\n */\n\n\nvar _default = Eventful;\nmodule.exports = _default;","map":null,"metadata":{},"sourceType":"script"}