{"ast":null,"code":"function _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/* eslint prefer-template: 0 */\n\n\nimport React, { forwardRef, Fragment, useCallback, useEffect, useImperativeHandle, useMemo, useReducer, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { fromEvent } from 'file-selector';\nimport { allFilesAccepted, composeEventHandlers, fileAccepted, fileMatchSize, isEvtWithFiles, isIeOrEdge, isPropagationStopped, onDocumentDragOver } from './utils/index';\n/**\r\n * Convenience wrapper component for the `useDropzone` hook\r\n *\r\n * ```jsx\r\n * <Dropzone>\r\n *   {({getRootProps, getInputProps}) => (\r\n *     <div {...getRootProps()}>\r\n *       <input {...getInputProps()} />\r\n *       <p>Drag 'n' drop some files here, or click to select files</p>\r\n *     </div>\r\n *   )}\r\n * </Dropzone>\r\n * ```\r\n */\n\nvar Dropzone = forwardRef(function (_ref, ref) {\n  var children = _ref.children,\n      params = _objectWithoutProperties(_ref, [\"children\"]);\n\n  var _useDropzone = useDropzone(params),\n      open = _useDropzone.open,\n      props = _objectWithoutProperties(_useDropzone, [\"open\"]);\n\n  useImperativeHandle(ref, function () {\n    return {\n      open: open\n    };\n  }, [open]); // TODO: Figure out why react-styleguidist cannot create docs if we don't return a jsx element\n\n  return React.createElement(Fragment, null, children(_objectSpread({}, props, {\n    open: open\n  })));\n});\nDropzone.displayName = 'Dropzone';\nDropzone.propTypes = {\n  /**\r\n   * Render function that exposes the dropzone state and prop getter fns\r\n   *\r\n   * @param {object} params\r\n   * @param {Function} params.getRootProps Returns the props you should apply to the root drop container you render\r\n   * @param {Function} params.getInputProps Returns the props you should apply to hidden file input you render\r\n   * @param {Function} params.open Open the native file selection dialog\r\n   * @param {boolean} params.isFocused Dropzone area is in focus\r\n   * @param {boolean} params.isFileDialogActive File dialog is opened\r\n   * @param {boolean} params.isDragActive Active drag is in progress\r\n   * @param {boolean} params.isDragAccept Dragged files are accepted\r\n   * @param {boolean} params.isDragReject Some dragged files are rejected\r\n   * @param {File[]} params.draggedFiles Files in active drag\r\n   * @param {File[]} params.acceptedFiles Accepted files\r\n   * @param {File[]} params.rejectedFiles Rejected files\r\n   */\n  children: PropTypes.func,\n\n  /**\r\n   * Set accepted file types.\r\n   * See https://github.com/okonet/attr-accept for more information.\r\n   * Keep in mind that mime type determination is not reliable across platforms. CSV files,\r\n   * for example, are reported as text/plain under macOS but as application/vnd.ms-excel under\r\n   * Windows. In some cases there might not be a mime type set at all.\r\n   * See: https://github.com/react-dropzone/react-dropzone/issues/276\r\n   */\n  accept: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n\n  /**\r\n   * Allow drag 'n' drop (or selection from the file dialog) of multiple files\r\n   */\n  multiple: PropTypes.bool,\n\n  /**\r\n   * If false, allow dropped items to take over the current browser window\r\n   */\n  preventDropOnDocument: PropTypes.bool,\n\n  /**\r\n   * If true, disables click to open the native file selection dialog\r\n   */\n  noClick: PropTypes.bool,\n\n  /**\r\n   * If true, disables SPACE/ENTER to open the native file selection dialog.\r\n   * Note that it also stops tracking the focus state.\r\n   */\n  noKeyboard: PropTypes.bool,\n\n  /**\r\n   * If true, disables drag 'n' drop\r\n   */\n  noDrag: PropTypes.bool,\n\n  /**\r\n   * If true, stops drag event propagation to parents\r\n   */\n  noDragEventsBubbling: PropTypes.bool,\n\n  /**\r\n   * Minimum file size (in bytes)\r\n   */\n  minSize: PropTypes.number,\n\n  /**\r\n   * Maximum file size (in bytes)\r\n   */\n  maxSize: PropTypes.number,\n\n  /**\r\n   * Enable/disable the dropzone\r\n   */\n  disabled: PropTypes.bool,\n\n  /**\r\n   * Use this to provide a custom file aggregator\r\n   *\r\n   * @param {(DragEvent|Event)} event A drag event or input change event (if files were selected via the file dialog)\r\n   */\n  getFilesFromEvent: PropTypes.func,\n\n  /**\r\n   * Cb for when closing the file dialog with no selection\r\n   */\n  onFileDialogCancel: PropTypes.func,\n\n  /**\r\n   * Cb for when the `dragenter` event occurs.\r\n   *\r\n   * @param {DragEvent} event\r\n   */\n  onDragEnter: PropTypes.func,\n\n  /**\r\n   * Cb for when the `dragleave` event occurs\r\n   *\r\n   * @param {DragEvent} event\r\n   */\n  onDragLeave: PropTypes.func,\n\n  /**\r\n   * Cb for when the `dragover` event occurs\r\n   *\r\n   * @param {DragEvent} event\r\n   */\n  onDragOver: PropTypes.func,\n\n  /**\r\n   * Cb for when the `drop` event occurs.\r\n   * Note that this callback is invoked after the `getFilesFromEvent` callback is done.\r\n   *\r\n   * Files are accepted or rejected based on the `accept`, `multiple`, `minSize` and `maxSize` props.\r\n   * `accept` must be a valid [MIME type](http://www.iana.org/assignments/media-types/media-types.xhtml) according to [input element specification](https://www.w3.org/wiki/HTML/Elements/input/file) or a valid file extension.\r\n   * If `multiple` is set to false and additional files are droppped,\r\n   * all files besides the first will be rejected.\r\n   * Any file which does not have a size in the [`minSize`, `maxSize`] range, will be rejected as well.\r\n   *\r\n   * Note that the `onDrop` callback will always be invoked regardless if the dropped files were accepted or rejected.\r\n   * If you'd like to react to a specific scenario, use the `onDropAccepted`/`onDropRejected` props.\r\n   *\r\n   * `onDrop` will provide you with an array of [File](https://developer.mozilla.org/en-US/docs/Web/API/File) objects which you can then process and send to a server.\r\n   * For example, with [SuperAgent](https://github.com/visionmedia/superagent) as a http/ajax library:\r\n   *\r\n   * ```js\r\n   * function onDrop(acceptedFiles) {\r\n   *   const req = request.post('/upload')\r\n   *   acceptedFiles.forEach(file => {\r\n   *     req.attach(file.name, file)\r\n   *   })\r\n   *   req.end(callback)\r\n   * }\r\n   * ```\r\n   *\r\n   * @param {File[]} acceptedFiles\r\n   * @param {File[]} rejectedFiles\r\n   * @param {(DragEvent|Event)} event A drag event or input change event (if files were selected via the file dialog)\r\n   */\n  onDrop: PropTypes.func,\n\n  /**\r\n   * Cb for when the `drop` event occurs.\r\n   * Note that if no files are accepted, this callback is not invoked.\r\n   *\r\n   * @param {File[]} files\r\n   * @param {(DragEvent|Event)} event\r\n   */\n  onDropAccepted: PropTypes.func,\n\n  /**\r\n   * Cb for when the `drop` event occurs.\r\n   * Note that if no files are rejected, this callback is not invoked.\r\n   *\r\n   * @param {object[]} files\r\n   * @param {(DragEvent|Event)} event\r\n   */\n  onDropRejected: PropTypes.func\n};\nexport default Dropzone;\n/**\r\n * A function that is invoked for the `dragenter`,\r\n * `dragover` and `dragleave` events.\r\n * It is not invoked if the items are not files (such as link, text, etc.).\r\n *\r\n * @callback dragCb\r\n * @param {DragEvent} event\r\n */\n\n/**\r\n * A function that is invoked for the `drop` or input change event.\r\n * It is not invoked if the items are not files (such as link, text, etc.).\r\n *\r\n * @callback dropCb\r\n * @param {File[]} acceptedFiles List of accepted files\r\n * @param {File[]} rejectedFiles List of rejected files\r\n * @param {(DragEvent|Event)} event A drag event or input change event (if files were selected via the file dialog)\r\n */\n\n/**\r\n * A function that is invoked for the `drop` or input change event.\r\n * It is not invoked if the items are files (such as link, text, etc.).\r\n *\r\n * @callback dropAcceptedCb\r\n * @param {File[]} files List of accepted files that meet the given criteria\r\n * (`accept`, `multiple`, `minSize`, `maxSize`)\r\n * @param {(DragEvent|Event)} event A drag event or input change event (if files were selected via the file dialog)\r\n */\n\n/**\r\n * A function that is invoked for the `drop` or input change event.\r\n *\r\n * @callback dropRejectedCb\r\n * @param {File[]} files List of rejected files that do not meet the given criteria\r\n * (`accept`, `multiple`, `minSize`, `maxSize`)\r\n * @param {(DragEvent|Event)} event A drag event or input change event (if files were selected via the file dialog)\r\n */\n\n/**\r\n * A function that is used aggregate files,\r\n * in a asynchronous fashion, from drag or input change events.\r\n *\r\n * @callback getFilesFromEvent\r\n * @param {(DragEvent|Event)} event A drag event or input change event (if files were selected via the file dialog)\r\n * @returns {(File[]|Promise<File[]>)}\r\n */\n\n/**\r\n * An object with the current dropzone state and some helper functions.\r\n *\r\n * @typedef {object} DropzoneState\r\n * @property {Function} getRootProps Returns the props you should apply to the root drop container you render\r\n * @property {Function} getInputProps Returns the props you should apply to hidden file input you render\r\n * @property {Function} open Open the native file selection dialog\r\n * @property {boolean} isFocused Dropzone area is in focus\r\n * @property {boolean} isFileDialogActive File dialog is opened\r\n * @property {boolean} isDragActive Active drag is in progress\r\n * @property {boolean} isDragAccept Dragged files are accepted\r\n * @property {boolean} isDragReject Some dragged files are rejected\r\n * @property {File[]} draggedFiles Files in active drag\r\n * @property {File[]} acceptedFiles Accepted files\r\n * @property {File[]} rejectedFiles Rejected files\r\n */\n\nvar initialState = {\n  isFocused: false,\n  isFileDialogActive: false,\n  isDragActive: false,\n  isDragAccept: false,\n  isDragReject: false,\n  draggedFiles: [],\n  acceptedFiles: [],\n  rejectedFiles: []\n};\n/**\r\n * A React hook that creates a drag 'n' drop area.\r\n *\r\n * ```jsx\r\n * function MyDropzone(props) {\r\n *   const {getRootProps, getInputProps} = useDropzone({\r\n *     onDrop: acceptedFiles => {\r\n *       // do something with the File objects, e.g. upload to some server\r\n *     }\r\n *   });\r\n *   return (\r\n *     <div {...getRootProps()}>\r\n *       <input {...getInputProps()} />\r\n *       <p>Drag and drop some files here, or click to select files</p>\r\n *     </div>\r\n *   )\r\n * }\r\n * ```\r\n *\r\n * @function useDropzone\r\n *\r\n * @param {object} props\r\n * @param {string|string[]} [props.accept] Set accepted file types.\r\n * See https://github.com/okonet/attr-accept for more information.\r\n * Keep in mind that mime type determination is not reliable across platforms. CSV files,\r\n * for example, are reported as text/plain under macOS but as application/vnd.ms-excel under\r\n * Windows. In some cases there might not be a mime type set at all.\r\n * See: https://github.com/react-dropzone/react-dropzone/issues/276\r\n * @param {boolean} [props.multiple=true] Allow drag 'n' drop (or selection from the file dialog) of multiple files\r\n * @param {boolean} [props.preventDropOnDocument=true] If false, allow dropped items to take over the current browser window\r\n * @param {boolean} [props.noClick=false] If true, disables click to open the native file selection dialog\r\n * @param {boolean} [props.noKeyboard=false] If true, disables SPACE/ENTER to open the native file selection dialog.\r\n * Note that it also stops tracking the focus state.\r\n * @param {boolean} [props.noDrag=false] If true, disables drag 'n' drop\r\n * @param {boolean} [props.noDragEventsBubbling=false] If true, stops drag event propagation to parents\r\n * @param {number} [props.minSize=0] Minimum file size (in bytes)\r\n * @param {number} [props.maxSize=Infinity] Maximum file size (in bytes)\r\n * @param {boolean} [props.disabled=false] Enable/disable the dropzone\r\n * @param {getFilesFromEvent} [props.getFilesFromEvent] Use this to provide a custom file aggregator\r\n * @param {Function} [props.onFileDialogCancel] Cb for when closing the file dialog with no selection\r\n * @param {dragCb} [props.onDragEnter] Cb for when the `dragenter` event occurs.\r\n * @param {dragCb} [props.onDragLeave] Cb for when the `dragleave` event occurs\r\n * @param {dragCb} [props.onDragOver] Cb for when the `dragover` event occurs\r\n * @param {dropCb} [props.onDrop] Cb for when the `drop` event occurs.\r\n * Note that this callback is invoked after the `getFilesFromEvent` callback is done.\r\n *\r\n * Files are accepted or rejected based on the `accept`, `multiple`, `minSize` and `maxSize` props.\r\n * `accept` must be a valid [MIME type](http://www.iana.org/assignments/media-types/media-types.xhtml) according to [input element specification](https://www.w3.org/wiki/HTML/Elements/input/file) or a valid file extension.\r\n * If `multiple` is set to false and additional files are droppped,\r\n * all files besides the first will be rejected.\r\n * Any file which does not have a size in the [`minSize`, `maxSize`] range, will be rejected as well.\r\n *\r\n * Note that the `onDrop` callback will always be invoked regardless if the dropped files were accepted or rejected.\r\n * If you'd like to react to a specific scenario, use the `onDropAccepted`/`onDropRejected` props.\r\n *\r\n * `onDrop` will provide you with an array of [File](https://developer.mozilla.org/en-US/docs/Web/API/File) objects which you can then process and send to a server.\r\n * For example, with [SuperAgent](https://github.com/visionmedia/superagent) as a http/ajax library:\r\n *\r\n * ```js\r\n * function onDrop(acceptedFiles) {\r\n *   const req = request.post('/upload')\r\n *   acceptedFiles.forEach(file => {\r\n *     req.attach(file.name, file)\r\n *   })\r\n *   req.end(callback)\r\n * }\r\n * ```\r\n * @param {dropAcceptedCb} [props.onDropAccepted]\r\n * @param {dropRejectedCb} [props.onDropRejected]\r\n *\r\n * @returns {DropzoneState}\r\n */\n\nexport function useDropzone() {\n  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      accept = _ref2.accept,\n      _ref2$disabled = _ref2.disabled,\n      disabled = _ref2$disabled === void 0 ? false : _ref2$disabled,\n      _ref2$getFilesFromEve = _ref2.getFilesFromEvent,\n      getFilesFromEvent = _ref2$getFilesFromEve === void 0 ? fromEvent : _ref2$getFilesFromEve,\n      _ref2$maxSize = _ref2.maxSize,\n      maxSize = _ref2$maxSize === void 0 ? Infinity : _ref2$maxSize,\n      _ref2$minSize = _ref2.minSize,\n      minSize = _ref2$minSize === void 0 ? 0 : _ref2$minSize,\n      _ref2$multiple = _ref2.multiple,\n      multiple = _ref2$multiple === void 0 ? true : _ref2$multiple,\n      onDragEnter = _ref2.onDragEnter,\n      onDragLeave = _ref2.onDragLeave,\n      onDragOver = _ref2.onDragOver,\n      onDrop = _ref2.onDrop,\n      onDropAccepted = _ref2.onDropAccepted,\n      onDropRejected = _ref2.onDropRejected,\n      onFileDialogCancel = _ref2.onFileDialogCancel,\n      _ref2$preventDropOnDo = _ref2.preventDropOnDocument,\n      preventDropOnDocument = _ref2$preventDropOnDo === void 0 ? true : _ref2$preventDropOnDo,\n      _ref2$noClick = _ref2.noClick,\n      noClick = _ref2$noClick === void 0 ? false : _ref2$noClick,\n      _ref2$noKeyboard = _ref2.noKeyboard,\n      noKeyboard = _ref2$noKeyboard === void 0 ? false : _ref2$noKeyboard,\n      _ref2$noDrag = _ref2.noDrag,\n      noDrag = _ref2$noDrag === void 0 ? false : _ref2$noDrag,\n      _ref2$noDragEventsBub = _ref2.noDragEventsBubbling,\n      noDragEventsBubbling = _ref2$noDragEventsBub === void 0 ? false : _ref2$noDragEventsBub;\n\n  var rootRef = useRef(null);\n  var inputRef = useRef(null);\n\n  var _useReducer = useReducer(reducer, initialState),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  var isFocused = state.isFocused,\n      isFileDialogActive = state.isFileDialogActive,\n      draggedFiles = state.draggedFiles; // Fn for opening the file dialog programmatically\n\n  var openFileDialog = useCallback(function () {\n    if (inputRef.current) {\n      dispatch({\n        type: 'openDialog'\n      });\n      inputRef.current.value = null;\n      inputRef.current.click();\n    }\n  }, [dispatch]); // Update file dialog active state when the window is focused on\n\n  var onWindowFocus = function onWindowFocus() {\n    // Execute the timeout only if the file dialog is opened in the browser\n    if (isFileDialogActive) {\n      setTimeout(function () {\n        if (inputRef.current) {\n          var files = inputRef.current.files;\n\n          if (!files.length) {\n            dispatch({\n              type: 'closeDialog'\n            });\n\n            if (typeof onFileDialogCancel === 'function') {\n              onFileDialogCancel();\n            }\n          }\n        }\n      }, 300);\n    }\n  };\n\n  useEffect(function () {\n    window.addEventListener('focus', onWindowFocus, false);\n    return function () {\n      window.removeEventListener('focus', onWindowFocus, false);\n    };\n  }, [inputRef, isFileDialogActive, onFileDialogCancel]); // Cb to open the file dialog when SPACE/ENTER occurs on the dropzone\n\n  var onKeyDownCb = useCallback(function (event) {\n    // Ignore keyboard events bubbling up the DOM tree\n    if (!rootRef.current || !rootRef.current.isEqualNode(event.target)) {\n      return;\n    }\n\n    if (event.keyCode === 32 || event.keyCode === 13) {\n      event.preventDefault();\n      openFileDialog();\n    }\n  }, [rootRef, inputRef]); // Update focus state for the dropzone\n\n  var onFocusCb = useCallback(function () {\n    dispatch({\n      type: 'focus'\n    });\n  }, []);\n  var onBlurCb = useCallback(function () {\n    dispatch({\n      type: 'blur'\n    });\n  }, []); // Cb to open the file dialog when click occurs on the dropzone\n\n  var onClickCb = useCallback(function () {\n    if (noClick) {\n      return;\n    } // In IE11/Edge the file-browser dialog is blocking, therefore, use setTimeout()\n    // to ensure React can handle state changes\n    // See: https://github.com/react-dropzone/react-dropzone/issues/450\n\n\n    if (isIeOrEdge()) {\n      setTimeout(openFileDialog, 0);\n    } else {\n      openFileDialog();\n    }\n  }, [inputRef, noClick]);\n  var dragTargetsRef = useRef([]);\n\n  var onDocumentDrop = function onDocumentDrop(event) {\n    if (rootRef.current && rootRef.current.contains(event.target)) {\n      // If we intercepted an event for our instance, let it propagate down to the instance's onDrop handler\n      return;\n    }\n\n    event.preventDefault();\n    dragTargetsRef.current = [];\n  };\n\n  useEffect(function () {\n    if (preventDropOnDocument) {\n      document.addEventListener('dragover', onDocumentDragOver, false);\n      document.addEventListener('drop', onDocumentDrop, false);\n    }\n\n    return function () {\n      if (preventDropOnDocument) {\n        document.removeEventListener('dragover', onDocumentDragOver);\n        document.removeEventListener('drop', onDocumentDrop);\n      }\n    };\n  }, [rootRef, preventDropOnDocument]);\n  var onDragEnterCb = useCallback(function (event) {\n    event.preventDefault(); // Persist here because we need the event later after getFilesFromEvent() is done\n\n    event.persist();\n    stopPropagation(event); // Count the dropzone and any children that are entered.\n\n    if (dragTargetsRef.current.indexOf(event.target) === -1) {\n      dragTargetsRef.current = [].concat(_toConsumableArray(dragTargetsRef.current), [event.target]);\n    }\n\n    if (isEvtWithFiles(event)) {\n      Promise.resolve(getFilesFromEvent(event)).then(function (draggedFiles) {\n        if (isPropagationStopped(event) && !noDragEventsBubbling) {\n          return;\n        }\n\n        dispatch({\n          draggedFiles: draggedFiles,\n          isDragActive: true,\n          type: 'setDraggedFiles'\n        });\n\n        if (onDragEnter) {\n          onDragEnter(event);\n        }\n      });\n    }\n  }, [getFilesFromEvent, onDragEnter, noDragEventsBubbling]);\n  var onDragOverCb = useCallback(function (event) {\n    event.preventDefault();\n    event.persist();\n    stopPropagation(event);\n\n    if (event.dataTransfer) {\n      try {\n        event.dataTransfer.dropEffect = 'copy';\n      } catch (_unused) {}\n      /* eslint-disable-line no-empty */\n\n    }\n\n    if (isEvtWithFiles(event) && onDragOver) {\n      onDragOver(event);\n    }\n\n    return false;\n  }, [onDragOver, noDragEventsBubbling]);\n  var onDragLeaveCb = useCallback(function (event) {\n    event.preventDefault();\n    event.persist();\n    stopPropagation(event); // Only deactivate once the dropzone and all children have been left\n\n    var targets = dragTargetsRef.current.filter(function (target) {\n      return target !== event.target && rootRef.current && rootRef.current.contains(target);\n    });\n    dragTargetsRef.current = targets;\n\n    if (targets.length > 0) {\n      return;\n    }\n\n    dispatch({\n      isDragActive: false,\n      type: 'setDraggedFiles',\n      draggedFiles: []\n    });\n\n    if (isEvtWithFiles(event) && onDragLeave) {\n      onDragLeave(event);\n    }\n  }, [rootRef, onDragLeave, noDragEventsBubbling]);\n  var onDropCb = useCallback(function (event) {\n    event.preventDefault(); // Persist here because we need the event later after getFilesFromEvent() is done\n\n    event.persist();\n    stopPropagation(event);\n    dragTargetsRef.current = [];\n\n    if (isEvtWithFiles(event)) {\n      Promise.resolve(getFilesFromEvent(event)).then(function (files) {\n        if (isPropagationStopped(event) && !noDragEventsBubbling) {\n          return;\n        }\n\n        var acceptedFiles = [];\n        var rejectedFiles = [];\n        files.forEach(function (file) {\n          if (fileAccepted(file, accept) && fileMatchSize(file, minSize, maxSize)) {\n            acceptedFiles.push(file);\n          } else {\n            rejectedFiles.push(file);\n          }\n        });\n\n        if (!multiple && acceptedFiles.length > 1) {\n          rejectedFiles.push.apply(rejectedFiles, _toConsumableArray(acceptedFiles.splice(0))); // Reject everything and empty accepted files\n        }\n\n        dispatch({\n          acceptedFiles: acceptedFiles,\n          rejectedFiles: rejectedFiles,\n          type: 'setFiles'\n        });\n\n        if (onDrop) {\n          onDrop(acceptedFiles, rejectedFiles, event);\n        }\n\n        if (rejectedFiles.length > 0 && onDropRejected) {\n          onDropRejected(rejectedFiles, event);\n        }\n\n        if (acceptedFiles.length > 0 && onDropAccepted) {\n          onDropAccepted(acceptedFiles, event);\n        }\n      });\n    }\n\n    dispatch({\n      type: 'reset'\n    });\n  }, [multiple, accept, minSize, maxSize, getFilesFromEvent, onDrop, onDropAccepted, onDropRejected, noDragEventsBubbling]);\n\n  var composeHandler = function composeHandler(fn) {\n    return disabled ? null : fn;\n  };\n\n  var composeKeyboardHandler = function composeKeyboardHandler(fn) {\n    return noKeyboard ? null : composeHandler(fn);\n  };\n\n  var composeDragHandler = function composeDragHandler(fn) {\n    return noDrag ? null : composeHandler(fn);\n  };\n\n  var stopPropagation = function stopPropagation(event) {\n    if (noDragEventsBubbling) {\n      event.stopPropagation();\n    }\n  };\n\n  var getRootProps = useMemo(function () {\n    return function () {\n      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref3$refKey = _ref3.refKey,\n          refKey = _ref3$refKey === void 0 ? 'ref' : _ref3$refKey,\n          onKeyDown = _ref3.onKeyDown,\n          onFocus = _ref3.onFocus,\n          onBlur = _ref3.onBlur,\n          onClick = _ref3.onClick,\n          onDragEnter = _ref3.onDragEnter,\n          onDragOver = _ref3.onDragOver,\n          onDragLeave = _ref3.onDragLeave,\n          onDrop = _ref3.onDrop,\n          rest = _objectWithoutProperties(_ref3, [\"refKey\", \"onKeyDown\", \"onFocus\", \"onBlur\", \"onClick\", \"onDragEnter\", \"onDragOver\", \"onDragLeave\", \"onDrop\"]);\n\n      return _objectSpread(_defineProperty({\n        onKeyDown: composeKeyboardHandler(composeEventHandlers(onKeyDown, onKeyDownCb)),\n        onFocus: composeKeyboardHandler(composeEventHandlers(onFocus, onFocusCb)),\n        onBlur: composeKeyboardHandler(composeEventHandlers(onBlur, onBlurCb)),\n        onClick: composeHandler(composeEventHandlers(onClick, onClickCb)),\n        onDragEnter: composeDragHandler(composeEventHandlers(onDragEnter, onDragEnterCb)),\n        onDragOver: composeDragHandler(composeEventHandlers(onDragOver, onDragOverCb)),\n        onDragLeave: composeDragHandler(composeEventHandlers(onDragLeave, onDragLeaveCb)),\n        onDrop: composeDragHandler(composeEventHandlers(onDrop, onDropCb))\n      }, refKey, rootRef), !disabled && !noKeyboard ? {\n        tabIndex: 0\n      } : {}, {}, rest);\n    };\n  }, [rootRef, onKeyDownCb, onFocusCb, onBlurCb, onClickCb, onDragEnterCb, onDragOverCb, onDragLeaveCb, onDropCb, noKeyboard, noDrag, disabled]);\n  var onInputElementClick = useCallback(function (event) {\n    event.stopPropagation();\n  }, []);\n  var getInputProps = useMemo(function () {\n    return function () {\n      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref4$refKey = _ref4.refKey,\n          refKey = _ref4$refKey === void 0 ? 'ref' : _ref4$refKey,\n          onChange = _ref4.onChange,\n          onClick = _ref4.onClick,\n          rest = _objectWithoutProperties(_ref4, [\"refKey\", \"onChange\", \"onClick\"]);\n\n      var inputProps = _defineProperty({\n        accept: accept,\n        multiple: multiple,\n        type: 'file',\n        style: {\n          display: 'none'\n        },\n        onChange: composeHandler(composeEventHandlers(onChange, onDropCb)),\n        onClick: composeHandler(composeEventHandlers(onClick, onInputElementClick)),\n        autoComplete: 'off',\n        tabIndex: -1\n      }, refKey, inputRef);\n\n      return _objectSpread({}, inputProps, {}, rest);\n    };\n  }, [inputRef, accept, multiple, onDropCb, disabled]);\n  var fileCount = draggedFiles.length;\n  var isDragAccept = fileCount > 0 && allFilesAccepted({\n    files: draggedFiles,\n    accept: accept,\n    minSize: minSize,\n    maxSize: maxSize,\n    multiple: multiple\n  });\n  var isDragReject = fileCount > 0 && !isDragAccept;\n  return _objectSpread({}, state, {\n    isDragAccept: isDragAccept,\n    isDragReject: isDragReject,\n    isFocused: isFocused && !disabled,\n    getRootProps: getRootProps,\n    getInputProps: getInputProps,\n    rootRef: rootRef,\n    inputRef: inputRef,\n    open: composeHandler(openFileDialog)\n  });\n}\n\nfunction reducer(state, action) {\n  /* istanbul ignore next */\n  switch (action.type) {\n    case 'focus':\n      return _objectSpread({}, state, {\n        isFocused: true\n      });\n\n    case 'blur':\n      return _objectSpread({}, state, {\n        isFocused: false\n      });\n\n    case 'openDialog':\n      return _objectSpread({}, state, {\n        isFileDialogActive: true\n      });\n\n    case 'closeDialog':\n      return _objectSpread({}, state, {\n        isFileDialogActive: false\n      });\n\n    case 'setDraggedFiles':\n      /* eslint no-case-declarations: 0 */\n      var isDragActive = action.isDragActive,\n          draggedFiles = action.draggedFiles;\n      return _objectSpread({}, state, {\n        draggedFiles: draggedFiles,\n        isDragActive: isDragActive\n      });\n\n    case 'setFiles':\n      return _objectSpread({}, state, {\n        acceptedFiles: action.acceptedFiles,\n        rejectedFiles: action.rejectedFiles\n      });\n\n    case 'reset':\n      return _objectSpread({}, state, {\n        isFileDialogActive: false,\n        isDragActive: false,\n        draggedFiles: [],\n        acceptedFiles: [],\n        rejectedFiles: []\n      });\n\n    default:\n      return state;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}