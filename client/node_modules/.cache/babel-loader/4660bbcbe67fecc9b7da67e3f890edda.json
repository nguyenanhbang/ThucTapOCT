{"ast":null,"code":"var vec2 = require(\"./vector\");\n\nvar matrix = require(\"./matrix\");\n/**\r\n * @module echarts/core/BoundingRect\r\n */\n\n\nvar v2ApplyTransform = vec2.applyTransform;\nvar mathMin = Math.min;\nvar mathMax = Math.max;\n/**\r\n * @alias module:echarts/core/BoundingRect\r\n */\n\nfunction BoundingRect(x, y, width, height) {\n  if (width < 0) {\n    x = x + width;\n    width = -width;\n  }\n\n  if (height < 0) {\n    y = y + height;\n    height = -height;\n  }\n  /**\r\n   * @type {number}\r\n   */\n\n\n  this.x = x;\n  /**\r\n   * @type {number}\r\n   */\n\n  this.y = y;\n  /**\r\n   * @type {number}\r\n   */\n\n  this.width = width;\n  /**\r\n   * @type {number}\r\n   */\n\n  this.height = height;\n}\n\nBoundingRect.prototype = {\n  constructor: BoundingRect,\n\n  /**\r\n   * @param {module:echarts/core/BoundingRect} other\r\n   */\n  union: function union(other) {\n    var x = mathMin(other.x, this.x);\n    var y = mathMin(other.y, this.y);\n    this.width = mathMax(other.x + other.width, this.x + this.width) - x;\n    this.height = mathMax(other.y + other.height, this.y + this.height) - y;\n    this.x = x;\n    this.y = y;\n  },\n\n  /**\r\n   * @param {Array.<number>} m\r\n   * @methods\r\n   */\n  applyTransform: function () {\n    var lt = [];\n    var rb = [];\n    var lb = [];\n    var rt = [];\n    return function (m) {\n      // In case usage like this\n      // el.getBoundingRect().applyTransform(el.transform)\n      // And element has no transform\n      if (!m) {\n        return;\n      }\n\n      lt[0] = lb[0] = this.x;\n      lt[1] = rt[1] = this.y;\n      rb[0] = rt[0] = this.x + this.width;\n      rb[1] = lb[1] = this.y + this.height;\n      v2ApplyTransform(lt, lt, m);\n      v2ApplyTransform(rb, rb, m);\n      v2ApplyTransform(lb, lb, m);\n      v2ApplyTransform(rt, rt, m);\n      this.x = mathMin(lt[0], rb[0], lb[0], rt[0]);\n      this.y = mathMin(lt[1], rb[1], lb[1], rt[1]);\n      var maxX = mathMax(lt[0], rb[0], lb[0], rt[0]);\n      var maxY = mathMax(lt[1], rb[1], lb[1], rt[1]);\n      this.width = maxX - this.x;\n      this.height = maxY - this.y;\n    };\n  }(),\n\n  /**\r\n   * Calculate matrix of transforming from self to target rect\r\n   * @param  {module:zrender/core/BoundingRect} b\r\n   * @return {Array.<number>}\r\n   */\n  calculateTransform: function calculateTransform(b) {\n    var a = this;\n    var sx = b.width / a.width;\n    var sy = b.height / a.height;\n    var m = matrix.create(); // 矩阵右乘\n\n    matrix.translate(m, m, [-a.x, -a.y]);\n    matrix.scale(m, m, [sx, sy]);\n    matrix.translate(m, m, [b.x, b.y]);\n    return m;\n  },\n\n  /**\r\n   * @param {(module:echarts/core/BoundingRect|Object)} b\r\n   * @return {boolean}\r\n   */\n  intersect: function intersect(b) {\n    if (!b) {\n      return false;\n    }\n\n    if (!(b instanceof BoundingRect)) {\n      // Normalize negative width/height.\n      b = BoundingRect.create(b);\n    }\n\n    var a = this;\n    var ax0 = a.x;\n    var ax1 = a.x + a.width;\n    var ay0 = a.y;\n    var ay1 = a.y + a.height;\n    var bx0 = b.x;\n    var bx1 = b.x + b.width;\n    var by0 = b.y;\n    var by1 = b.y + b.height;\n    return !(ax1 < bx0 || bx1 < ax0 || ay1 < by0 || by1 < ay0);\n  },\n  contain: function contain(x, y) {\n    var rect = this;\n    return x >= rect.x && x <= rect.x + rect.width && y >= rect.y && y <= rect.y + rect.height;\n  },\n\n  /**\r\n   * @return {module:echarts/core/BoundingRect}\r\n   */\n  clone: function clone() {\n    return new BoundingRect(this.x, this.y, this.width, this.height);\n  },\n\n  /**\r\n   * Copy from another rect\r\n   */\n  copy: function copy(other) {\n    this.x = other.x;\n    this.y = other.y;\n    this.width = other.width;\n    this.height = other.height;\n  },\n  plain: function plain() {\n    return {\n      x: this.x,\n      y: this.y,\n      width: this.width,\n      height: this.height\n    };\n  }\n};\n/**\r\n * @param {Object|module:zrender/core/BoundingRect} rect\r\n * @param {number} rect.x\r\n * @param {number} rect.y\r\n * @param {number} rect.width\r\n * @param {number} rect.height\r\n * @return {module:zrender/core/BoundingRect}\r\n */\n\nBoundingRect.create = function (rect) {\n  return new BoundingRect(rect.x, rect.y, rect.width, rect.height);\n};\n\nvar _default = BoundingRect;\nmodule.exports = _default;","map":null,"metadata":{},"sourceType":"script"}