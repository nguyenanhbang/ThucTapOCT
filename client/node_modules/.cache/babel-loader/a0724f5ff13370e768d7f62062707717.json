{"ast":null,"code":"/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nvar RadiusAxis = require(\"./RadiusAxis\");\n\nvar AngleAxis = require(\"./AngleAxis\");\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n\n/**\r\n * @module echarts/coord/polar/Polar\r\n */\n\n/**\r\n * @alias {module:echarts/coord/polar/Polar}\r\n * @constructor\r\n * @param {string} name\r\n */\n\n\nvar Polar = function Polar(name) {\n  /**\r\n   * @type {string}\r\n   */\n  this.name = name || '';\n  /**\r\n   * x of polar center\r\n   * @type {number}\r\n   */\n\n  this.cx = 0;\n  /**\r\n   * y of polar center\r\n   * @type {number}\r\n   */\n\n  this.cy = 0;\n  /**\r\n   * @type {module:echarts/coord/polar/RadiusAxis}\r\n   * @private\r\n   */\n\n  this._radiusAxis = new RadiusAxis();\n  /**\r\n   * @type {module:echarts/coord/polar/AngleAxis}\r\n   * @private\r\n   */\n\n  this._angleAxis = new AngleAxis();\n  this._radiusAxis.polar = this._angleAxis.polar = this;\n};\n\nPolar.prototype = {\n  type: 'polar',\n  axisPointerEnabled: true,\n  constructor: Polar,\n\n  /**\r\n   * @param {Array.<string>}\r\n   * @readOnly\r\n   */\n  dimensions: ['radius', 'angle'],\n\n  /**\r\n   * @type {module:echarts/coord/PolarModel}\r\n   */\n  model: null,\n\n  /**\r\n   * If contain coord\r\n   * @param {Array.<number>} point\r\n   * @return {boolean}\r\n   */\n  containPoint: function containPoint(point) {\n    var coord = this.pointToCoord(point);\n    return this._radiusAxis.contain(coord[0]) && this._angleAxis.contain(coord[1]);\n  },\n\n  /**\r\n   * If contain data\r\n   * @param {Array.<number>} data\r\n   * @return {boolean}\r\n   */\n  containData: function containData(data) {\n    return this._radiusAxis.containData(data[0]) && this._angleAxis.containData(data[1]);\n  },\n\n  /**\r\n   * @param {string} dim\r\n   * @return {module:echarts/coord/polar/AngleAxis|module:echarts/coord/polar/RadiusAxis}\r\n   */\n  getAxis: function getAxis(dim) {\n    return this['_' + dim + 'Axis'];\n  },\n\n  /**\r\n   * @return {Array.<module:echarts/coord/Axis>}\r\n   */\n  getAxes: function getAxes() {\n    return [this._radiusAxis, this._angleAxis];\n  },\n\n  /**\r\n   * Get axes by type of scale\r\n   * @param {string} scaleType\r\n   * @return {module:echarts/coord/polar/AngleAxis|module:echarts/coord/polar/RadiusAxis}\r\n   */\n  getAxesByScale: function getAxesByScale(scaleType) {\n    var axes = [];\n    var angleAxis = this._angleAxis;\n    var radiusAxis = this._radiusAxis;\n    angleAxis.scale.type === scaleType && axes.push(angleAxis);\n    radiusAxis.scale.type === scaleType && axes.push(radiusAxis);\n    return axes;\n  },\n\n  /**\r\n   * @return {module:echarts/coord/polar/AngleAxis}\r\n   */\n  getAngleAxis: function getAngleAxis() {\n    return this._angleAxis;\n  },\n\n  /**\r\n   * @return {module:echarts/coord/polar/RadiusAxis}\r\n   */\n  getRadiusAxis: function getRadiusAxis() {\n    return this._radiusAxis;\n  },\n\n  /**\r\n   * @param {module:echarts/coord/polar/Axis}\r\n   * @return {module:echarts/coord/polar/Axis}\r\n   */\n  getOtherAxis: function getOtherAxis(axis) {\n    var angleAxis = this._angleAxis;\n    return axis === angleAxis ? this._radiusAxis : angleAxis;\n  },\n\n  /**\r\n   * Base axis will be used on stacking.\r\n   *\r\n   * @return {module:echarts/coord/polar/Axis}\r\n   */\n  getBaseAxis: function getBaseAxis() {\n    return this.getAxesByScale('ordinal')[0] || this.getAxesByScale('time')[0] || this.getAngleAxis();\n  },\n\n  /**\r\n   * @param {string} [dim] 'radius' or 'angle' or 'auto' or null/undefined\r\n   * @return {Object} {baseAxes: [], otherAxes: []}\r\n   */\n  getTooltipAxes: function getTooltipAxes(dim) {\n    var baseAxis = dim != null && dim !== 'auto' ? this.getAxis(dim) : this.getBaseAxis();\n    return {\n      baseAxes: [baseAxis],\n      otherAxes: [this.getOtherAxis(baseAxis)]\n    };\n  },\n\n  /**\r\n   * Convert a single data item to (x, y) point.\r\n   * Parameter data is an array which the first element is radius and the second is angle\r\n   * @param {Array.<number>} data\r\n   * @param {boolean} [clamp=false]\r\n   * @return {Array.<number>}\r\n   */\n  dataToPoint: function dataToPoint(data, clamp) {\n    return this.coordToPoint([this._radiusAxis.dataToRadius(data[0], clamp), this._angleAxis.dataToAngle(data[1], clamp)]);\n  },\n\n  /**\r\n   * Convert a (x, y) point to data\r\n   * @param {Array.<number>} point\r\n   * @param {boolean} [clamp=false]\r\n   * @return {Array.<number>}\r\n   */\n  pointToData: function pointToData(point, clamp) {\n    var coord = this.pointToCoord(point);\n    return [this._radiusAxis.radiusToData(coord[0], clamp), this._angleAxis.angleToData(coord[1], clamp)];\n  },\n\n  /**\r\n   * Convert a (x, y) point to (radius, angle) coord\r\n   * @param {Array.<number>} point\r\n   * @return {Array.<number>}\r\n   */\n  pointToCoord: function pointToCoord(point) {\n    var dx = point[0] - this.cx;\n    var dy = point[1] - this.cy;\n    var angleAxis = this.getAngleAxis();\n    var extent = angleAxis.getExtent();\n    var minAngle = Math.min(extent[0], extent[1]);\n    var maxAngle = Math.max(extent[0], extent[1]); // Fix fixed extent in polarCreator\n    // FIXME\n\n    angleAxis.inverse ? minAngle = maxAngle - 360 : maxAngle = minAngle + 360;\n    var radius = Math.sqrt(dx * dx + dy * dy);\n    dx /= radius;\n    dy /= radius;\n    var radian = Math.atan2(-dy, dx) / Math.PI * 180; // move to angleExtent\n\n    var dir = radian < minAngle ? 1 : -1;\n\n    while (radian < minAngle || radian > maxAngle) {\n      radian += dir * 360;\n    }\n\n    return [radius, radian];\n  },\n\n  /**\r\n   * Convert a (radius, angle) coord to (x, y) point\r\n   * @param {Array.<number>} coord\r\n   * @return {Array.<number>}\r\n   */\n  coordToPoint: function coordToPoint(coord) {\n    var radius = coord[0];\n    var radian = coord[1] / 180 * Math.PI;\n    var x = Math.cos(radian) * radius + this.cx; // Inverse the y\n\n    var y = -Math.sin(radian) * radius + this.cy;\n    return [x, y];\n  },\n\n  /**\r\n   * Get ring area of cartesian.\r\n   * Area will have a contain function to determine if a point is in the coordinate system.\r\n   * @return {Ring}\r\n   */\n  getArea: function getArea() {\n    var angleAxis = this.getAngleAxis();\n    var radiusAxis = this.getRadiusAxis();\n    var radiusExtent = radiusAxis.getExtent().slice();\n    radiusExtent[0] > radiusExtent[1] && radiusExtent.reverse();\n    var angleExtent = angleAxis.getExtent();\n    var RADIAN = Math.PI / 180;\n    return {\n      cx: this.cx,\n      cy: this.cy,\n      r0: radiusExtent[0],\n      r: radiusExtent[1],\n      startAngle: -angleExtent[0] * RADIAN,\n      endAngle: -angleExtent[1] * RADIAN,\n      clockwise: angleAxis.inverse,\n      contain: function contain(x, y) {\n        // It's a ring shape.\n        // Start angle and end angle don't matter\n        var dx = x - this.cx;\n        var dy = y - this.cy;\n        var d2 = dx * dx + dy * dy;\n        var r = this.r;\n        var r0 = this.r0;\n        return d2 <= r * r && d2 >= r0 * r0;\n      }\n    };\n  }\n};\nvar _default = Polar;\nmodule.exports = _default;","map":null,"metadata":{},"sourceType":"script"}