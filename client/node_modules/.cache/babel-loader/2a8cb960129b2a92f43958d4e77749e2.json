{"ast":null,"code":"var zrUtil = require(\"../core/util\");\n\nvar Style = require(\"./Style\");\n\nvar Element = require(\"../Element\");\n\nvar RectText = require(\"./mixin/RectText\");\n/**\r\n * Base class of all displayable graphic objects\r\n * @module zrender/graphic/Displayable\r\n */\n\n/**\r\n * @alias module:zrender/graphic/Displayable\r\n * @extends module:zrender/Element\r\n * @extends module:zrender/graphic/mixin/RectText\r\n */\n\n\nfunction Displayable(opts) {\n  opts = opts || {};\n  Element.call(this, opts); // Extend properties\n\n  for (var name in opts) {\n    if (opts.hasOwnProperty(name) && name !== 'style') {\n      this[name] = opts[name];\n    }\n  }\n  /**\r\n   * @type {module:zrender/graphic/Style}\r\n   */\n\n\n  this.style = new Style(opts.style, this);\n  this._rect = null; // Shapes for cascade clipping.\n  // Can only be `null`/`undefined` or an non-empty array, MUST NOT be an empty array.\n  // because it is easy to only using null to check whether clipPaths changed.\n\n  this.__clipPaths = null; // FIXME Stateful must be mixined after style is setted\n  // Stateful.call(this, opts);\n}\n\nDisplayable.prototype = {\n  constructor: Displayable,\n  type: 'displayable',\n\n  /**\r\n   * Dirty flag. From which painter will determine if this displayable object needs brush.\r\n   * @name module:zrender/graphic/Displayable#__dirty\r\n   * @type {boolean}\r\n   */\n  __dirty: true,\n\n  /**\r\n   * Whether the displayable object is visible. when it is true, the displayable object\r\n   * is not drawn, but the mouse event can still trigger the object.\r\n   * @name module:/zrender/graphic/Displayable#invisible\r\n   * @type {boolean}\r\n   * @default false\r\n   */\n  invisible: false,\n\n  /**\r\n   * @name module:/zrender/graphic/Displayable#z\r\n   * @type {number}\r\n   * @default 0\r\n   */\n  z: 0,\n\n  /**\r\n   * @name module:/zrender/graphic/Displayable#z\r\n   * @type {number}\r\n   * @default 0\r\n   */\n  z2: 0,\n\n  /**\r\n   * The z level determines the displayable object can be drawn in which layer canvas.\r\n   * @name module:/zrender/graphic/Displayable#zlevel\r\n   * @type {number}\r\n   * @default 0\r\n   */\n  zlevel: 0,\n\n  /**\r\n   * Whether it can be dragged.\r\n   * @name module:/zrender/graphic/Displayable#draggable\r\n   * @type {boolean}\r\n   * @default false\r\n   */\n  draggable: false,\n\n  /**\r\n   * Whether is it dragging.\r\n   * @name module:/zrender/graphic/Displayable#draggable\r\n   * @type {boolean}\r\n   * @default false\r\n   */\n  dragging: false,\n\n  /**\r\n   * Whether to respond to mouse events.\r\n   * @name module:/zrender/graphic/Displayable#silent\r\n   * @type {boolean}\r\n   * @default false\r\n   */\n  silent: false,\n\n  /**\r\n   * If enable culling\r\n   * @type {boolean}\r\n   * @default false\r\n   */\n  culling: false,\n\n  /**\r\n   * Mouse cursor when hovered\r\n   * @name module:/zrender/graphic/Displayable#cursor\r\n   * @type {string}\r\n   */\n  cursor: 'pointer',\n\n  /**\r\n   * If hover area is bounding rect\r\n   * @name module:/zrender/graphic/Displayable#rectHover\r\n   * @type {string}\r\n   */\n  rectHover: false,\n\n  /**\r\n   * Render the element progressively when the value >= 0,\r\n   * usefull for large data.\r\n   * @type {boolean}\r\n   */\n  progressive: false,\n\n  /**\r\n   * @type {boolean}\r\n   */\n  incremental: false,\n\n  /**\r\n   * Scale ratio for global scale.\r\n   * @type {boolean}\r\n   */\n  globalScaleRatio: 1,\n  beforeBrush: function beforeBrush(ctx) {},\n  afterBrush: function afterBrush(ctx) {},\n\n  /**\r\n   * Graphic drawing method.\r\n   * @param {CanvasRenderingContext2D} ctx\r\n   */\n  // Interface\n  brush: function brush(ctx, prevEl) {},\n\n  /**\r\n   * Get the minimum bounding box.\r\n   * @return {module:zrender/core/BoundingRect}\r\n   */\n  // Interface\n  getBoundingRect: function getBoundingRect() {},\n\n  /**\r\n   * If displayable element contain coord x, y\r\n   * @param  {number} x\r\n   * @param  {number} y\r\n   * @return {boolean}\r\n   */\n  contain: function contain(x, y) {\n    return this.rectContain(x, y);\n  },\n\n  /**\r\n   * @param  {Function} cb\r\n   * @param  {}   context\r\n   */\n  traverse: function traverse(cb, context) {\n    cb.call(context, this);\n  },\n\n  /**\r\n   * If bounding rect of element contain coord x, y\r\n   * @param  {number} x\r\n   * @param  {number} y\r\n   * @return {boolean}\r\n   */\n  rectContain: function rectContain(x, y) {\n    var coord = this.transformCoordToLocal(x, y);\n    var rect = this.getBoundingRect();\n    return rect.contain(coord[0], coord[1]);\n  },\n\n  /**\r\n   * Mark displayable element dirty and refresh next frame\r\n   */\n  dirty: function dirty() {\n    this.__dirty = this.__dirtyText = true;\n    this._rect = null;\n    this.__zr && this.__zr.refresh();\n  },\n\n  /**\r\n   * If displayable object binded any event\r\n   * @return {boolean}\r\n   */\n  // TODO, events bound by bind\n  // isSilent: function () {\n  //     return !(\n  //         this.hoverable || this.draggable\n  //         || this.onmousemove || this.onmouseover || this.onmouseout\n  //         || this.onmousedown || this.onmouseup || this.onclick\n  //         || this.ondragenter || this.ondragover || this.ondragleave\n  //         || this.ondrop\n  //     );\n  // },\n\n  /**\r\n   * Alias for animate('style')\r\n   * @param {boolean} loop\r\n   */\n  animateStyle: function animateStyle(loop) {\n    return this.animate('style', loop);\n  },\n  attrKV: function attrKV(key, value) {\n    if (key !== 'style') {\n      Element.prototype.attrKV.call(this, key, value);\n    } else {\n      this.style.set(value);\n    }\n  },\n\n  /**\r\n   * @param {Object|string} key\r\n   * @param {*} value\r\n   */\n  setStyle: function setStyle(key, value) {\n    this.style.set(key, value);\n    this.dirty(false);\n    return this;\n  },\n\n  /**\r\n   * Use given style object\r\n   * @param  {Object} obj\r\n   */\n  useStyle: function useStyle(obj) {\n    this.style = new Style(obj, this);\n    this.dirty(false);\n    return this;\n  },\n\n  /**\r\n   * The string value of `textPosition` needs to be calculated to a real postion.\r\n   * For example, `'inside'` is calculated to `[rect.width/2, rect.height/2]`\r\n   * by default. See `contain/text.js#calculateTextPosition` for more details.\r\n   * But some coutom shapes like \"pin\", \"flag\" have center that is not exactly\r\n   * `[width/2, height/2]`. So we provide this hook to customize the calculation\r\n   * for those shapes. It will be called if the `style.textPosition` is a string.\r\n   * @param {Obejct} [out] Prepared out object. If not provided, this method should\r\n   *        be responsible for creating one.\r\n   * @param {module:zrender/graphic/Style} style\r\n   * @param {Object} rect {x, y, width, height}\r\n   * @return {Obejct} out The same as the input out.\r\n   *         {\r\n   *             x: number. mandatory.\r\n   *             y: number. mandatory.\r\n   *             textAlign: string. optional. use style.textAlign by default.\r\n   *             textVerticalAlign: string. optional. use style.textVerticalAlign by default.\r\n   *         }\r\n   */\n  calculateTextPosition: null\n};\nzrUtil.inherits(Displayable, Element);\nzrUtil.mixin(Displayable, RectText); // zrUtil.mixin(Displayable, Stateful);\n\nvar _default = Displayable;\nmodule.exports = _default;","map":null,"metadata":{},"sourceType":"script"}