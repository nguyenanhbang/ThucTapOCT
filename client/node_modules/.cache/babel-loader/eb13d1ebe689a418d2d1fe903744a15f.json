{"ast":null,"code":"import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_DAY = 24 * 60 * 60 * 1000;\n/**\r\n * @name getOverlappingDaysInIntervals\r\n * @category Interval Helpers\r\n * @summary Get the number of days that overlap in two time intervals\r\n *\r\n * @description\r\n * Get the number of days that overlap in two time intervals\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * - The function was renamed from `getOverlappingDaysInRanges` to `getOverlappingDaysInIntervals`.\r\n *   This change was made to mirror the use of the word \"interval\" in standard ISO 8601:2004 terminology:\r\n *\r\n *   ```\r\n *   2.1.3\r\n *   time interval\r\n *   part of the time axis limited by two instants\r\n *   ```\r\n *\r\n *   Also, this function now accepts an object with `start` and `end` properties\r\n *   instead of two arguments as an interval.\r\n *   This function now throws `RangeError` if the start of the interval is after its end\r\n *   or if any date in the interval is `Invalid Date`.\r\n *\r\n *   ```javascript\r\n *   // Before v2.0.0\r\n *\r\n *   getOverlappingDaysInRanges(\r\n *     new Date(2014, 0, 10), new Date(2014, 0, 20),\r\n *     new Date(2014, 0, 17), new Date(2014, 0, 21)\r\n *   )\r\n *\r\n *   // v2.0.0 onward\r\n *\r\n *   getOverlappingDaysInIntervals(\r\n *     { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *     { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\r\n *   )\r\n *   ```\r\n *\r\n * @param {Interval} intervalLeft - the first interval to compare. See [Interval]{@link docs/Interval}\r\n * @param {Interval} intervalRight - the second interval to compare. See [Interval]{@link docs/Interval}\r\n * @returns {Number} the number of days that overlap in two time intervals\r\n * @throws {TypeError} 2 arguments required\r\n * @throws {RangeError} The start of an interval cannot be after its end\r\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\r\n *\r\n * @example\r\n * // For overlapping time intervals adds 1 for each started overlapping day:\r\n * getOverlappingDaysInIntervals(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\r\n * )\r\n * //=> 3\r\n *\r\n * @example\r\n * // For non-overlapping time intervals returns 0:\r\n * getOverlappingDaysInIntervals(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\r\n * )\r\n * //=> 0\r\n */\n\nexport default function getOverlappingDaysInIntervals(dirtyIntervalLeft, dirtyIntervalRight) {\n  requiredArgs(2, arguments);\n  var intervalLeft = dirtyIntervalLeft || {};\n  var intervalRight = dirtyIntervalRight || {};\n  var leftStartTime = toDate(intervalLeft.start).getTime();\n  var leftEndTime = toDate(intervalLeft.end).getTime();\n  var rightStartTime = toDate(intervalRight.start).getTime();\n  var rightEndTime = toDate(intervalRight.end).getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(leftStartTime <= leftEndTime && rightStartTime <= rightEndTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var isOverlapping = leftStartTime < rightEndTime && rightStartTime < leftEndTime;\n\n  if (!isOverlapping) {\n    return 0;\n  }\n\n  var overlapStartDate = rightStartTime < leftStartTime ? leftStartTime : rightStartTime;\n  var overlapEndDate = rightEndTime > leftEndTime ? leftEndTime : rightEndTime;\n  var differenceInMs = overlapEndDate - overlapStartDate;\n  return Math.ceil(differenceInMs / MILLISECONDS_IN_DAY);\n}","map":null,"metadata":{},"sourceType":"module"}