{"ast":null,"code":"import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\r\n * @name eachYearOfInterval\r\n * @category Interval Helpers\r\n * @summary Return the array of yearly timestamps within the specified time interval.\r\n *\r\n * @description\r\n * Return the array of yearly timestamps within the specified time interval.\r\n *\r\n * @param {Interval} interval - the interval. See [Interval]{@link docs/types/Interval}\r\n * @returns {Date[]} the array with starts of yearly timestamps from the month of the interval start to the month of the interval end\r\n * @throws {TypeError} 1 argument required\r\n * @throws {RangeError} The start of an interval cannot be after its end\r\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\r\n *\r\n * @example\r\n * // Each year between 6 February 2014 and 10 August 2017:\r\n * var result = eachYearOfInterval({\r\n *   start: new Date(2014, 1, 6),\r\n *   end: new Date(2017, 7, 10)\r\n * })\r\n * //=> [\r\n * //   Wed Jan 01 2014 00:00:00,\r\n * //   Thu Jan 01 2015 00:00:00,\r\n * //   Fri Jan 01 2016 00:00:00,\r\n * //   Sun Jan 01 2017 00:00:00\r\n * // ]\r\n */\n\nexport default function eachYearOfInterval(dirtyInterval) {\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startDate.getTime() <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var dates = [];\n  var currentDate = startDate;\n  currentDate.setHours(0, 0, 0, 0);\n  currentDate.setMonth(0, 1);\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate.setFullYear(currentDate.getFullYear() + 1);\n  }\n\n  return dates;\n}","map":null,"metadata":{},"sourceType":"module"}