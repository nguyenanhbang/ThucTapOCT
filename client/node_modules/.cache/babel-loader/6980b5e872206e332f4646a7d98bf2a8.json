{"ast":null,"code":"import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\r\n * @name closestIndexTo\r\n * @category Common Helpers\r\n * @summary Return an index of the closest date from the array comparing to the given date.\r\n *\r\n * @description\r\n * Return an index of the closest date from the array comparing to the given date.\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * - Now, `closestIndexTo` doesn't throw an exception\r\n *   when the second argument is not an array, and returns Invalid Date instead.\r\n *\r\n * @param {Date|Number} dateToCompare - the date to compare with\r\n * @param {Date[]|Number[]} datesArray - the array to search\r\n * @returns {Number} an index of the date closest to the given date\r\n * @throws {TypeError} 2 arguments required\r\n *\r\n * @example\r\n * // Which date is closer to 6 September 2015?\r\n * var dateToCompare = new Date(2015, 8, 6)\r\n * var datesArray = [\r\n *   new Date(2015, 0, 1),\r\n *   new Date(2016, 0, 1),\r\n *   new Date(2017, 0, 1)\r\n * ]\r\n * var result = closestIndexTo(dateToCompare, datesArray)\r\n * //=> 1\r\n */\n\nexport default function closestIndexTo(dirtyDateToCompare, dirtyDatesArray) {\n  requiredArgs(2, arguments);\n  var dateToCompare = toDate(dirtyDateToCompare);\n\n  if (isNaN(dateToCompare)) {\n    return NaN;\n  }\n\n  var timeToCompare = dateToCompare.getTime();\n  var datesArray; // `dirtyDatesArray` is undefined or null\n\n  if (dirtyDatesArray == null) {\n    datesArray = []; // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method\n  } else if (typeof dirtyDatesArray.forEach === 'function') {\n    datesArray = dirtyDatesArray; // If `dirtyDatesArray` is Array-like Object, convert to Array. Otherwise, make it empty Array\n  } else {\n    datesArray = Array.prototype.slice.call(dirtyDatesArray);\n  }\n\n  var result;\n  var minDistance;\n  datesArray.forEach(function (dirtyDate, index) {\n    var currentDate = toDate(dirtyDate);\n\n    if (isNaN(currentDate)) {\n      result = NaN;\n      minDistance = NaN;\n      return;\n    }\n\n    var distance = Math.abs(timeToCompare - currentDate.getTime());\n\n    if (result == null || distance < minDistance) {\n      result = index;\n      minDistance = distance;\n    }\n  });\n  return result;\n}","map":null,"metadata":{},"sourceType":"module"}