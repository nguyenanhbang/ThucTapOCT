{"ast":null,"code":"/*\r\n * Module dependencies\r\n */\nvar balanced = require(\"balanced-match\");\n/**\r\n * Expose `reduceFunctionCall`\r\n *\r\n * @type {Function}\r\n */\n\n\nmodule.exports = reduceFunctionCall;\n/**\r\n * Walkthrough all expressions, evaluate them and insert them into the declaration\r\n *\r\n * @param {Array} expressions\r\n * @param {Object} declaration\r\n */\n\nfunction reduceFunctionCall(string, functionRE, callback) {\n  var call = string;\n  return getFunctionCalls(string, functionRE).reduce(function (string, obj) {\n    return string.replace(obj.functionIdentifier + \"(\" + obj.matches.body + \")\", evalFunctionCall(obj.matches.body, obj.functionIdentifier, callback, call, functionRE));\n  }, string);\n}\n/**\r\n * Parses expressions in a value\r\n *\r\n * @param {String} value\r\n * @returns {Array}\r\n * @api private\r\n */\n\n\nfunction getFunctionCalls(call, functionRE) {\n  var expressions = [];\n  var fnRE = typeof functionRE === \"string\" ? new RegExp(\"\\\\b(\" + functionRE + \")\\\\(\") : functionRE;\n\n  do {\n    var searchMatch = fnRE.exec(call);\n\n    if (!searchMatch) {\n      return expressions;\n    }\n\n    if (searchMatch[1] === undefined) {\n      throw new Error(\"Missing the first couple of parenthesis to get the function identifier in \" + functionRE);\n    }\n\n    var fn = searchMatch[1];\n    var startIndex = searchMatch.index;\n    var matches = balanced(\"(\", \")\", call.substring(startIndex));\n\n    if (!matches || matches.start !== searchMatch[0].length - 1) {\n      throw new SyntaxError(fn + \"(): missing closing ')' in the value '\" + call + \"'\");\n    }\n\n    expressions.push({\n      matches: matches,\n      functionIdentifier: fn\n    });\n    call = matches.post;\n  } while (fnRE.test(call));\n\n  return expressions;\n}\n/**\r\n * Evaluates an expression\r\n *\r\n * @param {String} expression\r\n * @returns {String}\r\n * @api private\r\n */\n\n\nfunction evalFunctionCall(string, functionIdentifier, callback, call, functionRE) {\n  // allow recursivity\n  return callback(reduceFunctionCall(string, functionRE, callback), functionIdentifier, call);\n}","map":null,"metadata":{},"sourceType":"script"}