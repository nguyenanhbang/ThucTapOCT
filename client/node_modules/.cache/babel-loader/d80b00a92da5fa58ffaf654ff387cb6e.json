{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _decimal = _interopRequireDefault(require(\"decimal.js-light\"));\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\r\n * @fileOverview 一些公用的运算方法\r\n * @author xile611\r\n * @date 2015-09-17\r\n */\n\n/**\r\n * 获取数值的位数\r\n * 其中绝对值属于区间[0.1, 1)， 得到的值为0\r\n * 绝对值属于区间[0.01, 0.1)，得到的位数为 -1\r\n * 绝对值属于区间[0.001, 0.01)，得到的位数为 -2\r\n *\r\n * @param  {Number} value 数值\r\n * @return {Integer} 位数\r\n */\n\n\nfunction getDigitCount(value) {\n  var result;\n\n  if (value === 0) {\n    result = 1;\n  } else {\n    result = Math.floor(new _decimal.default(value).abs().log(10).toNumber()) + 1;\n  }\n\n  return result;\n}\n/**\r\n * 按照固定的步长获取[start, end)这个区间的数据\r\n * 并且需要处理js计算精度的问题\r\n *\r\n * @param  {Decimal} start 起点\r\n * @param  {Decimal} end   终点，不包含该值\r\n * @param  {Decimal} step  步长\r\n * @return {Array}         若干数值\r\n */\n\n\nfunction rangeStep(start, end, step) {\n  var num = new _decimal.default(start);\n  var i = 0;\n  var result = []; // magic number to prevent infinite loop\n\n  while (num.lt(end) && i < 100000) {\n    result.push(num.toNumber());\n    num = num.add(step);\n    i++;\n  }\n\n  return result;\n}\n/**\r\n * 对数值进行线性插值\r\n *\r\n * @param  {Number} a  定义域的极点\r\n * @param  {Number} b  定义域的极点\r\n * @param  {Number} t  [0, 1]内的某个值\r\n * @return {Number}    定义域内的某个值\r\n */\n\n\nvar interpolateNumber = (0, _utils.curry)(function (a, b, t) {\n  var newA = +a;\n  var newB = +b;\n  return newA + t * (newB - newA);\n});\n/**\r\n * 线性插值的逆运算\r\n *\r\n * @param  {Number} a 定义域的极点\r\n * @param  {Number} b 定义域的极点\r\n * @param  {Number} x 可以认为是插值后的一个输出值\r\n * @return {Number}   当x在 a ~ b这个范围内时，返回值属于[0, 1]\r\n */\n\nvar uninterpolateNumber = (0, _utils.curry)(function (a, b, x) {\n  var diff = b - +a;\n  diff = diff || Infinity;\n  return (x - a) / diff;\n});\n/**\r\n * 线性插值的逆运算，并且有截断的操作\r\n *\r\n * @param  {Number} a 定义域的极点\r\n * @param  {Number} b 定义域的极点\r\n * @param  {Number} x 可以认为是插值后的一个输出值\r\n * @return {Number}   当x在 a ~ b这个区间内时，返回值属于[0, 1]，\r\n * 当x不在 a ~ b这个区间时，会截断到 a ~ b 这个区间\r\n */\n\nvar uninterpolateTruncation = (0, _utils.curry)(function (a, b, x) {\n  var diff = b - +a;\n  diff = diff || Infinity;\n  return Math.max(0, Math.min(1, (x - a) / diff));\n});\nvar _default = {\n  rangeStep: rangeStep,\n  getDigitCount: getDigitCount,\n  interpolateNumber: interpolateNumber,\n  uninterpolateNumber: uninterpolateNumber,\n  uninterpolateTruncation: uninterpolateTruncation\n};\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}