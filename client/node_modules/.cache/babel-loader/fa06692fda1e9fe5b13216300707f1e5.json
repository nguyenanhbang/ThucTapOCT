{"ast":null,"code":"/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nvar SingleAxis = require(\"./SingleAxis\");\n\nvar axisHelper = require(\"../axisHelper\");\n\nvar _layout = require(\"../../util/layout\");\n\nvar getLayoutRect = _layout.getLayoutRect;\n\nvar _util = require(\"zrender/lib/core/util\");\n\nvar each = _util.each;\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n\n/**\r\n * Single coordinates system.\r\n */\n\n/**\r\n * Create a single coordinates system.\r\n *\r\n * @param {module:echarts/coord/single/AxisModel} axisModel\r\n * @param {module:echarts/model/Global} ecModel\r\n * @param {module:echarts/ExtensionAPI} api\r\n */\n\nfunction Single(axisModel, ecModel, api) {\n  /**\r\n   * @type {string}\r\n   * @readOnly\r\n   */\n  this.dimension = 'single';\n  /**\r\n   * Add it just for draw tooltip.\r\n   *\r\n   * @type {Array.<string>}\r\n   * @readOnly\r\n   */\n\n  this.dimensions = ['single'];\n  /**\r\n   * @private\r\n   * @type {module:echarts/coord/single/SingleAxis}.\r\n   */\n\n  this._axis = null;\n  /**\r\n   * @private\r\n   * @type {module:zrender/core/BoundingRect}\r\n   */\n\n  this._rect;\n\n  this._init(axisModel, ecModel, api);\n  /**\r\n   * @type {module:echarts/coord/single/AxisModel}\r\n   */\n\n\n  this.model = axisModel;\n}\n\nSingle.prototype = {\n  type: 'singleAxis',\n  axisPointerEnabled: true,\n  constructor: Single,\n\n  /**\r\n   * Initialize single coordinate system.\r\n   *\r\n   * @param  {module:echarts/coord/single/AxisModel} axisModel\r\n   * @param  {module:echarts/model/Global} ecModel\r\n   * @param  {module:echarts/ExtensionAPI} api\r\n   * @private\r\n   */\n  _init: function _init(axisModel, ecModel, api) {\n    var dim = this.dimension;\n    var axis = new SingleAxis(dim, axisHelper.createScaleByModel(axisModel), [0, 0], axisModel.get('type'), axisModel.get('position'));\n    var isCategory = axis.type === 'category';\n    axis.onBand = isCategory && axisModel.get('boundaryGap');\n    axis.inverse = axisModel.get('inverse');\n    axis.orient = axisModel.get('orient');\n    axisModel.axis = axis;\n    axis.model = axisModel;\n    axis.coordinateSystem = this;\n    this._axis = axis;\n  },\n\n  /**\r\n   * Update axis scale after data processed\r\n   * @param  {module:echarts/model/Global} ecModel\r\n   * @param  {module:echarts/ExtensionAPI} api\r\n   */\n  update: function update(ecModel, api) {\n    ecModel.eachSeries(function (seriesModel) {\n      if (seriesModel.coordinateSystem === this) {\n        var data = seriesModel.getData();\n        each(data.mapDimension(this.dimension, true), function (dim) {\n          this._axis.scale.unionExtentFromData(data, dim);\n        }, this);\n        axisHelper.niceScaleExtent(this._axis.scale, this._axis.model);\n      }\n    }, this);\n  },\n\n  /**\r\n   * Resize the single coordinate system.\r\n   *\r\n   * @param  {module:echarts/coord/single/AxisModel} axisModel\r\n   * @param  {module:echarts/ExtensionAPI} api\r\n   */\n  resize: function resize(axisModel, api) {\n    this._rect = getLayoutRect({\n      left: axisModel.get('left'),\n      top: axisModel.get('top'),\n      right: axisModel.get('right'),\n      bottom: axisModel.get('bottom'),\n      width: axisModel.get('width'),\n      height: axisModel.get('height')\n    }, {\n      width: api.getWidth(),\n      height: api.getHeight()\n    });\n\n    this._adjustAxis();\n  },\n\n  /**\r\n   * @return {module:zrender/core/BoundingRect}\r\n   */\n  getRect: function getRect() {\n    return this._rect;\n  },\n\n  /**\r\n   * @private\r\n   */\n  _adjustAxis: function _adjustAxis() {\n    var rect = this._rect;\n    var axis = this._axis;\n    var isHorizontal = axis.isHorizontal();\n    var extent = isHorizontal ? [0, rect.width] : [0, rect.height];\n    var idx = axis.reverse ? 1 : 0;\n    axis.setExtent(extent[idx], extent[1 - idx]);\n\n    this._updateAxisTransform(axis, isHorizontal ? rect.x : rect.y);\n  },\n\n  /**\r\n   * @param  {module:echarts/coord/single/SingleAxis} axis\r\n   * @param  {number} coordBase\r\n   */\n  _updateAxisTransform: function _updateAxisTransform(axis, coordBase) {\n    var axisExtent = axis.getExtent();\n    var extentSum = axisExtent[0] + axisExtent[1];\n    var isHorizontal = axis.isHorizontal();\n    axis.toGlobalCoord = isHorizontal ? function (coord) {\n      return coord + coordBase;\n    } : function (coord) {\n      return extentSum - coord + coordBase;\n    };\n    axis.toLocalCoord = isHorizontal ? function (coord) {\n      return coord - coordBase;\n    } : function (coord) {\n      return extentSum - coord + coordBase;\n    };\n  },\n\n  /**\r\n   * Get axis.\r\n   *\r\n   * @return {module:echarts/coord/single/SingleAxis}\r\n   */\n  getAxis: function getAxis() {\n    return this._axis;\n  },\n\n  /**\r\n   * Get axis, add it just for draw tooltip.\r\n   *\r\n   * @return {[type]} [description]\r\n   */\n  getBaseAxis: function getBaseAxis() {\n    return this._axis;\n  },\n\n  /**\r\n   * @return {Array.<module:echarts/coord/Axis>}\r\n   */\n  getAxes: function getAxes() {\n    return [this._axis];\n  },\n\n  /**\r\n   * @return {Object} {baseAxes: [], otherAxes: []}\r\n   */\n  getTooltipAxes: function getTooltipAxes() {\n    return {\n      baseAxes: [this.getAxis()]\n    };\n  },\n\n  /**\r\n   * If contain point.\r\n   *\r\n   * @param  {Array.<number>} point\r\n   * @return {boolean}\r\n   */\n  containPoint: function containPoint(point) {\n    var rect = this.getRect();\n    var axis = this.getAxis();\n    var orient = axis.orient;\n\n    if (orient === 'horizontal') {\n      return axis.contain(axis.toLocalCoord(point[0])) && point[1] >= rect.y && point[1] <= rect.y + rect.height;\n    } else {\n      return axis.contain(axis.toLocalCoord(point[1])) && point[0] >= rect.y && point[0] <= rect.y + rect.height;\n    }\n  },\n\n  /**\r\n   * @param {Array.<number>} point\r\n   * @return {Array.<number>}\r\n   */\n  pointToData: function pointToData(point) {\n    var axis = this.getAxis();\n    return [axis.coordToData(axis.toLocalCoord(point[axis.orient === 'horizontal' ? 0 : 1]))];\n  },\n\n  /**\r\n   * Convert the series data to concrete point.\r\n   *\r\n   * @param  {number|Array.<number>} val\r\n   * @return {Array.<number>}\r\n   */\n  dataToPoint: function dataToPoint(val) {\n    var axis = this.getAxis();\n    var rect = this.getRect();\n    var pt = [];\n    var idx = axis.orient === 'horizontal' ? 0 : 1;\n\n    if (val instanceof Array) {\n      val = val[0];\n    }\n\n    pt[idx] = axis.toGlobalCoord(axis.dataToCoord(+val));\n    pt[1 - idx] = idx === 0 ? rect.y + rect.height / 2 : rect.x + rect.width / 2;\n    return pt;\n  }\n};\nvar _default = Single;\nmodule.exports = _default;","map":null,"metadata":{},"sourceType":"script"}