{"ast":null,"code":"/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nvar zrUtil = require(\"zrender/lib/core/util\");\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n\n/**\r\n * @param {number} [time=500] Time in ms\r\n * @param {string} [easing='linear']\r\n * @param {number} [delay=0]\r\n * @param {Function} [callback]\r\n *\r\n * @example\r\n *  // Animate position\r\n *  animation\r\n *      .createWrap()\r\n *      .add(el1, {position: [10, 10]})\r\n *      .add(el2, {shape: {width: 500}, style: {fill: 'red'}}, 400)\r\n *      .done(function () { // done })\r\n *      .start('cubicOut');\r\n */\n\n\nfunction createWrap() {\n  var storage = [];\n  var elExistsMap = {};\n  var doneCallback;\n  return {\n    /**\r\n     * Caution: a el can only be added once, otherwise 'done'\r\n     * might not be called. This method checks this (by el.id),\r\n     * suppresses adding and returns false when existing el found.\r\n     *\r\n     * @param {modele:zrender/Element} el\r\n     * @param {Object} target\r\n     * @param {number} [time=500]\r\n     * @param {number} [delay=0]\r\n     * @param {string} [easing='linear']\r\n     * @return {boolean} Whether adding succeeded.\r\n     *\r\n     * @example\r\n     *     add(el, target, time, delay, easing);\r\n     *     add(el, target, time, easing);\r\n     *     add(el, target, time);\r\n     *     add(el, target);\r\n     */\n    add: function add(el, target, time, delay, easing) {\n      if (zrUtil.isString(delay)) {\n        easing = delay;\n        delay = 0;\n      }\n\n      if (elExistsMap[el.id]) {\n        return false;\n      }\n\n      elExistsMap[el.id] = 1;\n      storage.push({\n        el: el,\n        target: target,\n        time: time,\n        delay: delay,\n        easing: easing\n      });\n      return true;\n    },\n\n    /**\r\n     * Only execute when animation finished. Will not execute when any\r\n     * of 'stop' or 'stopAnimation' called.\r\n     *\r\n     * @param {Function} callback\r\n     */\n    done: function done(callback) {\n      doneCallback = callback;\n      return this;\n    },\n\n    /**\r\n     * Will stop exist animation firstly.\r\n     */\n    start: function start() {\n      var count = storage.length;\n\n      for (var i = 0, len = storage.length; i < len; i++) {\n        var item = storage[i];\n        item.el.animateTo(item.target, item.time, item.delay, item.easing, done);\n      }\n\n      return this;\n\n      function done() {\n        count--;\n\n        if (!count) {\n          storage.length = 0;\n          elExistsMap = {};\n          doneCallback && doneCallback();\n        }\n      }\n    }\n  };\n}\n\nexports.createWrap = createWrap;","map":null,"metadata":{},"sourceType":"script"}