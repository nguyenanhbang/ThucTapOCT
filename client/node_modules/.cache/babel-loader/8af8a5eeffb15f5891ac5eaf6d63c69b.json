{"ast":null,"code":"'use strict';\n\nvar $ = require('./export');\n\nvar global = require('../internals/global');\n\nvar InternalMetadataModule = require('../internals/internal-metadata');\n\nvar fails = require('../internals/fails');\n\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\n\nvar iterate = require('../internals/iterate');\n\nvar anInstance = require('../internals/an-instance');\n\nvar isObject = require('../internals/is-object');\n\nvar setToStringTag = require('../internals/set-to-string-tag');\n\nvar defineProperty = require('../internals/object-define-property').f;\n\nvar forEach = require('../internals/array-iteration').forEach;\n\nvar DESCRIPTORS = require('../internals/descriptors');\n\nvar InternalStateModule = require('../internals/internal-state');\n\nvar setInternalState = InternalStateModule.set;\nvar internalStateGetterFor = InternalStateModule.getterFor;\n\nmodule.exports = function (CONSTRUCTOR_NAME, wrapper, common) {\n  var IS_MAP = CONSTRUCTOR_NAME.indexOf('Map') !== -1;\n  var IS_WEAK = CONSTRUCTOR_NAME.indexOf('Weak') !== -1;\n  var ADDER = IS_MAP ? 'set' : 'add';\n  var NativeConstructor = global[CONSTRUCTOR_NAME];\n  var NativePrototype = NativeConstructor && NativeConstructor.prototype;\n  var exported = {};\n  var Constructor;\n\n  if (!DESCRIPTORS || typeof NativeConstructor != 'function' || !(IS_WEAK || NativePrototype.forEach && !fails(function () {\n    new NativeConstructor().entries().next();\n  }))) {\n    // create collection constructor\n    Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);\n    InternalMetadataModule.REQUIRED = true;\n  } else {\n    Constructor = wrapper(function (target, iterable) {\n      setInternalState(anInstance(target, Constructor, CONSTRUCTOR_NAME), {\n        type: CONSTRUCTOR_NAME,\n        collection: new NativeConstructor()\n      });\n      if (iterable != undefined) iterate(iterable, target[ADDER], {\n        that: target,\n        AS_ENTRIES: IS_MAP\n      });\n    });\n    var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);\n    forEach(['add', 'clear', 'delete', 'forEach', 'get', 'has', 'set', 'keys', 'values', 'entries'], function (KEY) {\n      var IS_ADDER = KEY == 'add' || KEY == 'set';\n\n      if (KEY in NativePrototype && !(IS_WEAK && KEY == 'clear')) {\n        createNonEnumerableProperty(Constructor.prototype, KEY, function (a, b) {\n          var collection = getInternalState(this).collection;\n          if (!IS_ADDER && IS_WEAK && !isObject(a)) return KEY == 'get' ? undefined : false;\n          var result = collection[KEY](a === 0 ? 0 : a, b);\n          return IS_ADDER ? this : result;\n        });\n      }\n    });\n    IS_WEAK || defineProperty(Constructor.prototype, 'size', {\n      configurable: true,\n      get: function get() {\n        return getInternalState(this).collection.size;\n      }\n    });\n  }\n\n  setToStringTag(Constructor, CONSTRUCTOR_NAME, false, true);\n  exported[CONSTRUCTOR_NAME] = Constructor;\n  $({\n    global: true,\n    forced: true\n  }, exported);\n  if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);\n  return Constructor;\n};","map":null,"metadata":{},"sourceType":"script"}