{"ast":null,"code":"var util = require(\"../core/util\");\n\nvar _event = require(\"../core/event\");\n\nvar Dispatcher = _event.Dispatcher;\n\nvar requestAnimationFrame = require(\"./requestAnimationFrame\");\n\nvar Animator = require(\"./Animator\");\n/**\r\n * Animation main class, dispatch and manage all animation controllers\r\n *\r\n * @module zrender/animation/Animation\r\n * @author pissang(https://github.com/pissang)\r\n */\n// TODO Additive animation\n// http://iosoteric.com/additive-animations-animatewithduration-in-ios-8/\n// https://developer.apple.com/videos/wwdc2014/#236\n\n/**\r\n * @typedef {Object} IZRenderStage\r\n * @property {Function} update\r\n */\n\n/**\r\n * @alias module:zrender/animation/Animation\r\n * @constructor\r\n * @param {Object} [options]\r\n * @param {Function} [options.onframe]\r\n * @param {IZRenderStage} [options.stage]\r\n * @example\r\n *     var animation = new Animation();\r\n *     var obj = {\r\n *         x: 100,\r\n *         y: 100\r\n *     };\r\n *     animation.animate(node.position)\r\n *         .when(1000, {\r\n *             x: 500,\r\n *             y: 500\r\n *         })\r\n *         .when(2000, {\r\n *             x: 100,\r\n *             y: 100\r\n *         })\r\n *         .start('spline');\r\n */\n\n\nvar Animation = function Animation(options) {\n  options = options || {};\n  this.stage = options.stage || {};\n\n  this.onframe = options.onframe || function () {}; // private properties\n\n\n  this._clips = [];\n  this._running = false;\n  this._time;\n  this._pausedTime;\n  this._pauseStart;\n  this._paused = false;\n  Dispatcher.call(this);\n};\n\nAnimation.prototype = {\n  constructor: Animation,\n\n  /**\r\n   * Add clip\r\n   * @param {module:zrender/animation/Clip} clip\r\n   */\n  addClip: function addClip(clip) {\n    this._clips.push(clip);\n  },\n\n  /**\r\n   * Add animator\r\n   * @param {module:zrender/animation/Animator} animator\r\n   */\n  addAnimator: function addAnimator(animator) {\n    animator.animation = this;\n    var clips = animator.getClips();\n\n    for (var i = 0; i < clips.length; i++) {\n      this.addClip(clips[i]);\n    }\n  },\n\n  /**\r\n   * Delete animation clip\r\n   * @param {module:zrender/animation/Clip} clip\r\n   */\n  removeClip: function removeClip(clip) {\n    var idx = util.indexOf(this._clips, clip);\n\n    if (idx >= 0) {\n      this._clips.splice(idx, 1);\n    }\n  },\n\n  /**\r\n   * Delete animation clip\r\n   * @param {module:zrender/animation/Animator} animator\r\n   */\n  removeAnimator: function removeAnimator(animator) {\n    var clips = animator.getClips();\n\n    for (var i = 0; i < clips.length; i++) {\n      this.removeClip(clips[i]);\n    }\n\n    animator.animation = null;\n  },\n  _update: function _update() {\n    var time = new Date().getTime() - this._pausedTime;\n\n    var delta = time - this._time;\n    var clips = this._clips;\n    var len = clips.length;\n    var deferredEvents = [];\n    var deferredClips = [];\n\n    for (var i = 0; i < len; i++) {\n      var clip = clips[i];\n      var e = clip.step(time, delta); // Throw out the events need to be called after\n      // stage.update, like destroy\n\n      if (e) {\n        deferredEvents.push(e);\n        deferredClips.push(clip);\n      }\n    } // Remove the finished clip\n\n\n    for (var i = 0; i < len;) {\n      if (clips[i]._needsRemove) {\n        clips[i] = clips[len - 1];\n        clips.pop();\n        len--;\n      } else {\n        i++;\n      }\n    }\n\n    len = deferredEvents.length;\n\n    for (var i = 0; i < len; i++) {\n      deferredClips[i].fire(deferredEvents[i]);\n    }\n\n    this._time = time;\n    this.onframe(delta); // 'frame' should be triggered before stage, because upper application\n    // depends on the sequence (e.g., echarts-stream and finish\n    // event judge)\n\n    this.trigger('frame', delta);\n\n    if (this.stage.update) {\n      this.stage.update();\n    }\n  },\n  _startLoop: function _startLoop() {\n    var self = this;\n    this._running = true;\n\n    function step() {\n      if (self._running) {\n        requestAnimationFrame(step);\n        !self._paused && self._update();\n      }\n    }\n\n    requestAnimationFrame(step);\n  },\n\n  /**\r\n   * Start animation.\r\n   */\n  start: function start() {\n    this._time = new Date().getTime();\n    this._pausedTime = 0;\n\n    this._startLoop();\n  },\n\n  /**\r\n   * Stop animation.\r\n   */\n  stop: function stop() {\n    this._running = false;\n  },\n\n  /**\r\n   * Pause animation.\r\n   */\n  pause: function pause() {\n    if (!this._paused) {\n      this._pauseStart = new Date().getTime();\n      this._paused = true;\n    }\n  },\n\n  /**\r\n   * Resume animation.\r\n   */\n  resume: function resume() {\n    if (this._paused) {\n      this._pausedTime += new Date().getTime() - this._pauseStart;\n      this._paused = false;\n    }\n  },\n\n  /**\r\n   * Clear animation.\r\n   */\n  clear: function clear() {\n    this._clips = [];\n  },\n\n  /**\r\n   * Whether animation finished.\r\n   */\n  isFinished: function isFinished() {\n    return !this._clips.length;\n  },\n\n  /**\r\n   * Creat animator for a target, whose props can be animated.\r\n   *\r\n   * @param  {Object} target\r\n   * @param  {Object} options\r\n   * @param  {boolean} [options.loop=false] Whether loop animation.\r\n   * @param  {Function} [options.getter=null] Get value from target.\r\n   * @param  {Function} [options.setter=null] Set value to target.\r\n   * @return {module:zrender/animation/Animation~Animator}\r\n   */\n  // TODO Gap\n  animate: function animate(target, options) {\n    options = options || {};\n    var animator = new Animator(target, options.loop, options.getter, options.setter);\n    this.addAnimator(animator);\n    return animator;\n  }\n};\nutil.mixin(Animation, Dispatcher);\nvar _default = Animation;\nmodule.exports = _default;","map":null,"metadata":{},"sourceType":"script"}