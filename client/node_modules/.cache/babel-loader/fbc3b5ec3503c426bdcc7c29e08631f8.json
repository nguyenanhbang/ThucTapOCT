{"ast":null,"code":"/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nvar zrUtil = require(\"zrender/lib/core/util\");\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n\n/**\r\n * Cartesian coordinate system\r\n * @module  echarts/coord/Cartesian\r\n *\r\n */\n\n\nfunction dimAxisMapper(dim) {\n  return this._axes[dim];\n}\n/**\r\n * @alias module:echarts/coord/Cartesian\r\n * @constructor\r\n */\n\n\nvar Cartesian = function Cartesian(name) {\n  this._axes = {};\n  this._dimList = [];\n  /**\r\n   * @type {string}\r\n   */\n\n  this.name = name || '';\n};\n\nCartesian.prototype = {\n  constructor: Cartesian,\n  type: 'cartesian',\n\n  /**\r\n   * Get axis\r\n   * @param  {number|string} dim\r\n   * @return {module:echarts/coord/Cartesian~Axis}\r\n   */\n  getAxis: function getAxis(dim) {\n    return this._axes[dim];\n  },\n\n  /**\r\n   * Get axes list\r\n   * @return {Array.<module:echarts/coord/Cartesian~Axis>}\r\n   */\n  getAxes: function getAxes() {\n    return zrUtil.map(this._dimList, dimAxisMapper, this);\n  },\n\n  /**\r\n   * Get axes list by given scale type\r\n   */\n  getAxesByScale: function getAxesByScale(scaleType) {\n    scaleType = scaleType.toLowerCase();\n    return zrUtil.filter(this.getAxes(), function (axis) {\n      return axis.scale.type === scaleType;\n    });\n  },\n\n  /**\r\n   * Add axis\r\n   * @param {module:echarts/coord/Cartesian.Axis}\r\n   */\n  addAxis: function addAxis(axis) {\n    var dim = axis.dim;\n    this._axes[dim] = axis;\n\n    this._dimList.push(dim);\n  },\n\n  /**\r\n   * Convert data to coord in nd space\r\n   * @param {Array.<number>|Object.<string, number>} val\r\n   * @return {Array.<number>|Object.<string, number>}\r\n   */\n  dataToCoord: function dataToCoord(val) {\n    return this._dataCoordConvert(val, 'dataToCoord');\n  },\n\n  /**\r\n   * Convert coord in nd space to data\r\n   * @param  {Array.<number>|Object.<string, number>} val\r\n   * @return {Array.<number>|Object.<string, number>}\r\n   */\n  coordToData: function coordToData(val) {\n    return this._dataCoordConvert(val, 'coordToData');\n  },\n  _dataCoordConvert: function _dataCoordConvert(input, method) {\n    var dimList = this._dimList;\n    var output = input instanceof Array ? [] : {};\n\n    for (var i = 0; i < dimList.length; i++) {\n      var dim = dimList[i];\n      var axis = this._axes[dim];\n      output[dim] = axis[method](input[dim]);\n    }\n\n    return output;\n  }\n};\nvar _default = Cartesian;\nmodule.exports = _default;","map":null,"metadata":{},"sourceType":"script"}